let [INDEX, DOCS] = [{"version":"2.3.9","fields":["name","ref","doc"],"fieldVectors":[["name/0",[0,13.471]],["ref/0",[0,6.735]],["doc/0",[0,1.411,null,1.178,null,1.369,null,1.586,null,0.63,null,2.947,null,3.268,null,1.933,null,2.412,null,1.582,null,1.933,null,0.448,null,2.947,null,1.933,null,1.582,null,0.57,null,0.678,null,0.534,null,0.813,null,1.933,null,1.933,null,1.933,null,1.933,null,1.041,null,1.933,null,1.933,null,0.476,null,1.933,null,1.041,null,1.933,null,1.933,null,0.926,null,1.582,null,1.582,null,1.933,null,1.933,null,1.933,null,1.933,null,1.933,null,1.933,null,1.351,null,1.933,null,2.947,null,2.947,null,1.933,null,2.947,null,1.582,null,1.041,null,1.041,null,1.933,null,1.582,null,1.582,null,2.433,null,2.495,null,1.586,null,1.933,null,0.827,null,2.412,null,1.411,null,2.412,null,2.412,null,1.351,null,1.582,null,1.582,null,1.582,null,1.933,null,1.582,null,2.412,null,1.582,null,1.933,null,2.412,null,1.582,null,0.374,null,1.933,null,1.528,null,1.933,null,1.933,null,1.933,null,1.933,null,1.796,null,2.495,null,0.534,null,1.933,null,2.947,null,2.412,null,1.582,null,1.933,null,2.947,null,2.412,null,2.412,null,2.412,null,1.582,null,1.582,null,1.582,null,2.612,null,1.582,null,1.582,null,1.582,null,0.926,null,1.933,null,1.582,null,1.582,null,1.933,null,3.57,null,1.933,null,1.933,null,1.933,null,1.933,null,1.933,null,1.933,null,1.933,null,1.933,null,1.041,null,1.582,null,1.582,null,1.582,null,1.933,null,1.351,null,1.933,null,1.933,null,2.947,null,1.933,null,1.178,null,1.933,null,1.933,null,1.178,null,1.933,null,1.933,null,1.933,null,1.933,null,0.926,null,1.933,null,1.933,null,1.933,null,1.933,null,1.933,null,1.582]],["name/1",[125,17.148]],["ref/1",[40,9.831]],["doc/1",[0,0.848,2,0.679,null,0.556,null,0.483,6,0.845,8,0.845,null,0.845,11,0.506,14,0.845,null,0.533,null,0.574,null,0.641,null,0.285,23,0.556,26,0.832,28,1.25,46,0.845,52,0.63,54,0.556,56,0.442,72,0.6,79,1.079,84,0.845,88,0.845,null,0.845,null,0.845,null,1.449,null,1.449,94,1.818,null,0.845,null,0.845,null,0.845,null,0.848,100,1.449,112,1.667,122,0.63,125,2.059,130,2.435,137,0.63,null,1.237,null,1.237,null,1.079,null,0.891,null,1.461,null,0.722,null,0.722,null,1.449,null,1.242,null,1.449,null,0.947,null,0.845,null,0.845,null,0.678,null,0.63,null,1.079,null,1.449,null,1.079,null,0.845,null,0.845,null,0.63,null,0.845,null,1.079,null,0.953,null,2.253,null,1.667,null,1.678,null,0.556,null,1.901,null,1.901,null,0.845,null,0.556,null,2.202,null,1.449,null,3.378,null,1.237,null,1.623,null,1.033,null,1.033,null,1.77,null,0.63,null,1.901,null,0.845,null,0.556,null,1.033,null,1.623,null,1.033,null,0.63,null,0.63,null,1.901,null,1.033,null,0.722,null,1.033,null,1.033,null,0.845,null,1.033,null,1.77,null,1.033,null,1.033,null,1.033,null,0.845,null,1.033,null,0.845,null,2.323,null,1.77,null,1.033,null,1.033,null,0.845,null,1.033,null,0.845,null,1.033,null,1.033,null,1.033,null,1.033,null,1.237,null,1.033,null,1.033,null,0.722,null,1.449,null,1.033,null,1.449,null,0.953,null,0.845,null,0.845,null,1.449,null,1.033,null,0.845,null,0.442,null,0.845,null,0.845,null,0.845,null,0.845,null,0.722,null,0.396,null,0.722,null,0.845,null,0.556,null,0.845,null,0.722,null,0.722,null,0.845,null,0.845,null,0.845,null,1.033,null,1.449,null,0.442,null,1.033,null,0.63,null,0.845,null,0.845,null,0.845,null,1.033,null,1.033,null,1.033,null,0.641,null,1.033,null,1.033,null,1.901,null,0.845,null,0.845,null,0.845,null,2.782,null,0.722,null,0.845,null,0.845,null,0.845,null,0.845,null,1.033,null,0.845,null,1.033,null,0.63,null,0.722,null,1.033,null,1.033,null,1.77,null,1.033,null,1.033,null,1.449,null,1.033,null,3.097,null,3.378,null,2.753,null,1.033,null,1.033,null,1.77,null,1.033,null,1.033,null,1.77,null,1.77,null,1.033,null,1.77,null,1.033,null,1.77,null,0.845,null,1.77,null,1.033,null,1.77,null,1.449,null,1.033,null,0.845,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.77,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,0.845,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,0.845,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033,null,1.033]],["name/2",[4,3.567]],["ref/2",[248,11.513]],["doc/2",[0,0.688,null,0.876,null,1.3,4,0.59,11,0.503,15,0.773,null,0.744,null,1.16,null,0.644,23,0.774,26,0.575,28,0.774,31,0.688,47,1.256,null,1.256,50,1.177,52,1.422,null,1.631,null,1.824,56,0.999,null,1.177,null,0.688,null,1.177,null,1.177,72,0.57,74,0.999,81,1.102,93,1.91,98,1.117,125,0.876,130,1.41,137,0.876,null,1.005,null,2.058,null,1.422,null,1.129,null,1.861,null,1.005,null,1.005,null,1.91,null,1.013,null,1.91,null,1.166,null,1.177,null,1.177,null,0.315,null,1.422,null,1.422,null,1.91,null,1.795,null,1.177,null,1.177,null,0.876,null,1.177,null,0.876,null,0.774,null,2.774,null,1.824,null,0.876,null,0.774,null,1.177,null,1.177,null,1.177,null,1.256,null,0.876,178,0.876,181,0.774,185,0.876,187,1.177,218,2.41,null,1.256,null,1.177,null,1.177,224,1.177,null,1.595,null,1.177,null,1.177,null,1.177,null,1.177,null,1.631,null,1.612,null,1.005,null,1.177,null,1.256,null,2.41,null,1.005,null,1.005,240,1.177,242,1.177,null,0.615,245,1.422,null,1.177,252,0.397,255,1.177,259,1.005,null,1.005,275,1.177,295,1.177,297,3.585,359,1.177,null,2.271,null,1.438,null,1.422,null,1.438,null,1.438,null,1.005,null,1.005,null,1.177,null,2.334,null,1.177,null,1.631,null,0.774,null,1.438,null,2.41,null,1.177,null,1.177,null,0.688,null,1.256,null,1.438,null,1.438,null,2.41,null,1.177,null,1.438,null,1.438,null,1.438,null,0.876,null,0.774,null,1.438,null,1.91,null,1.91,null,2.334,null,1.438,null,1.438,null,1.438,null,1.438,null,1.438,null,1.438,null,1.005,null,1.177,null,2.945,null,0.551,null,1.438,null,1.438,null,1.438,null,1.005,null,1.005,null,1.177,null,1.438,null,2.334,null,1.438,null,1.177,null,1.438,null,2.945,null,1.438,null,1.438]],["name/3",[415,23.026]],["ref/3",[416,14.067]],["doc/3",[11,0.501,16,0.609,28,1.929,56,1.534,61,2.505,72,0.694,74,1.534,80,2.505,null,0.989,163,1.929,186,2.185,212,2.505,371,1.929,376,1.716,null,1.929,380,2.934,388,2.934,null,2.934,417,2.934,null,2.934,null,2.185,null,2.934,null,3.585,null,2.934,null,3.585,null,2.934,null,2.934,null,2.505,null,3.173,null,2.934,null,3.585,null,3.585,null,3.585,null,3.585,null,3.585,null,3.585,null,3.585,null,3.585]],["name/4",[47,15.141]],["ref/4",[437,14.067]],["doc/4",[1,1.506,null,0.947,null,1.329,11,0.49,15,0.478,null,0.7,null,0.682,null,0.682,26,0.609,31,2.153,54,1.9,72,0.798,81,1.241,94,1.329,101,2.022,115,2.022,117,1.726,130,1.183,139,1.726,null,1.506,null,0.947,null,0.947,144,2.88,148,0.85,151,0.773,155,1.506,161,1.329,163,1.9,183,1.726,186,1.506,215,1.726,225,1.924,231,0.947,245,2.512,252,0.682,291,2.022,371,2.741,375,2.022,377,1.329,404,1.726,406,2.022,415,2.89,417,3.373,null,2.022,420,2.022,424,2.022,null,2.89,null,2.468,null,2.468,null,2.89,438,3.143,null,1.726,null,2.022,null,1.329,null,3.531,null,2.022,null,2.47,null,2.47,null,2.47,null,2.47,null,2.47,null,2.47,null,2.022,null,2.47,null,2.47,null,2.47,null,2.022,null,2.47,null,2.47,null,2.022,null,2.47,null,2.022,null,2.47,null,2.022,null,2.022,null,2.47,null,2.47,null,2.47,null,2.47,null,2.47,null,2.47]],["name/5",[48,15.141]],["ref/5",[469,14.067]],["doc/5",[4,0.606,11,0.509,15,0.86,null,0.812,18,0.783,23,1.527,31,1.359,47,1.527,null,1.527,72,0.549,74,1.214,98,2.397,113,2.323,null,2.323,141,1.492,null,1.088,146,1.527,151,0.973,158,1.73,174,1.983,181,1.527,205,2.323,243,1.214,252,0.783,337,2.323,367,2.323,369,2.323,371,2.572,374,2.323,397,1.983,null,3.185,438,2.719,null,1.983,443,2.323,454,3.185,470,2.838,null,2.838,null,2.838,null,2.838,null,2.838,null,2.838,null,2.838,null,2.838,null,3.185,null,2.838,null,2.838,null,2.838,null,2.838,null,2.838,null,2.838,null,2.838,null,2.838,null,2.838,null,1.983,null,2.838,null,2.838]],["name/6",[405,19.661]],["ref/6",[491,14.067]],["doc/6",[1,1.528,4,0.649,11,0.482,15,0.485,null,0.606,null,1.321,null,1.147,26,1.024,33,2.052,47,1.921,null,1.921,58,1.709,72,0.485,74,1.937,81,1.25,98,1.201,122,1.528,142,1.369,146,0.862,148,1.227,151,0.782,155,2.175,169,1.349,181,1.921,212,1.752,215,3.164,225,1.527,231,1.369,234,1.349,245,1.528,252,0.692,360,3.031,365,2.494,null,2.494,371,1.921,373,2.052,376,1.201,400,1.369,405,1.752,419,1.528,427,1.752,438,2.494,441,1.921,457,2.052,459,2.052,492,2.507,null,2.921,null,2.507,null,2.507,null,2.052,null,2.507,null,2.507,null,2.507,null,2.507,null,2.507,null,2.507,null,2.507,null,2.507,null,2.507,null,2.507,null,2.507,null,2.507,null,2.507,null,2.052,null,2.507,null,2.052,null,2.507,null,2.507,null,2.507,null,2.507]],["name/7",[517,28.134]],["ref/7",[518,14.067]],["doc/7",[3,1.785,null,0.421,11,0.493,15,0.836,null,0.564,null,1.192,null,0.916,31,2.526,58,1.588,72,0.642,98,1.588,130,1.588,140,2.633,146,1.486,148,1.486,151,0.946,225,1.42,231,1.272,243,1.849,252,0.916,376,2.3,386,1.785,410,2.715,461,2.715,null,2.715,519,4.803,null,4.32,null,5.088,null,2.715,null,3.317,null,3.317,null,2.022,null,3.317,null,3.317,null,3.317]],["name/8",[400,10.788]],["ref/8",[529,14.067]],["doc/8",[2,1.66,4,0.549,11,0.494,26,1.066,160,2.638,268,2.638,null,3.025,530,4.329,null,4.329,null,4.329,null,3.543]],["name/9",[264,23.026]],["ref/9",[534,14.067]],["doc/9",[4,0.587,263,3.789,535,4.629,null,4.629]],["name/10",[261,23.026]],["ref/10",[537,14.067]],["doc/10",[4,0.583,179,3.762,262,3.762,538,4.597,null,4.597]],["name/11",[146,9.676]],["ref/11",[540,14.067]],["doc/11",[4,0.587,11,0.409,31,2.216,541,4.629]],["name/12",[138,19.661]],["ref/12",[542,14.067]],["doc/12",[11,0.398,15,0.872,null,0.765,146,1.549,151,0.986,478,3.686,543,4.504,null,2.745]],["name/13",[266,23.026]],["ref/13",[545,14.067]],["doc/13",[15,0.896,null,0.787,null,1.278,null,1.278]],["name/14",[546,28.134]],["ref/14",[547,14.067]],["doc/14",[4,0.583,17,1.269,79,2.802,360,2.802,493,3.762]],["name/15",[268,17.148]],["ref/15",[548,14.067]],["doc/15",[11,0.4,72,0.878,165,2.44,440,3.711,549,3.711,null,4.535,null,4.535]],["name/16",[269,19.661]],["ref/16",[552,14.067]],["doc/16",[11,0.403,15,0.884,null,0.776,151,1,243,1.954,268,2.783]],["name/17",[2,10.788]],["ref/17",[553,14.067]],["doc/17",[4,0.591,81,1.287,439,3.258]],["name/18",[62,23.026]],["ref/18",[554,14.067]],["doc/18",[0,1.136,2,0.91,null,1.277,null,0.594,11,0.499,17,0.655,26,0.585,40,1.659,51,1.943,null,2.691,null,2.816,56,1.468,58,1.136,63,1.943,null,1.943,66,2.808,null,2.808,null,1.943,70,1.943,null,1.943,null,1.017,74,1.725,79,1.447,null,1.659,null,0.947,85,1.943,94,1.847,122,1.447,130,1.136,136,1.943,142,1.693,151,0.52,160,1.447,null,1.277,171,1.943,183,2.816,230,1.659,null,1.316,null,1.659,234,1.277,236,1.659,null,1.659,null,1.943,null,2.808,247,1.943,360,1.447,362,1.447,365,1.659,null,1.659,370,1.659,377,1.277,400,0.91,404,1.659,422,1.943,496,1.943,525,1.447,533,1.943,549,1.943,555,1.659,null,2.374,null,2.374,null,2.374,null,3.431,null,2.374,null,2.374,null,2.374,null,1.659,null,2.374,null,2.374,null,2.374,null,1.659,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374,null,2.374]],["name/19",[590,13.471]],["ref/19",[591,14.067]],["doc/19",[11,0.516,16,0.616,18,1,26,0.893,28,2.46,117,2.532,146,1.246,163,1.95,165,1.95,222,2.966,252,1,256,2.966,null,2.966,null,2.966,null,3.675,null,2.532,385,2.209,590,1.735,592,3.624,null,2.966,null,2.966,null,2.966,null,3.624,null,3.624,null,3.624,null,3.624,null,3.624,null,3.624,null,3.624]],["name/20",[603,28.134]],["ref/20",[604,14.067]],["doc/20",[4,0.429,11,0.453,15,0.655,null,0.575,26,1.078,56,1.448,58,1.621,72,0.655,81,0.934,112,1.822,141,1.298,null,1.678,148,1.164,151,0.741,153,2.063,219,1.822,252,0.934,385,2.667,400,1.678,441,1.822,544,2.063,590,2.095,605,2.77,null,3.582,null,2.365,null,3.385,null,3.385,null,2.77,null,2.77,null,2.77,null,2.77,null,2.77,null,2.063,null,2.365,null,2.77,null,2.77,null,2.77,null,2.365,null,2.365,null,2.365,null,2.365,null,2.365,null,2.063,null,2.063,null,2.77,null,2.365,null,2.063,null,3.385]],["name/21",[631,28.134]],["ref/21",[632,14.067]],["doc/21",[11,0.461,15,0.818,null,0.545,26,1.164,72,0.621,81,0.885,94,1.725,112,1.725,137,1.954,141,1.229,null,1.62,148,1.103,151,0.925,153,1.954,174,2.24,219,1.725,252,0.885,359,2.624,385,1.954,null,1.725,400,1.62,512,2.624,544,2.879,590,2.022,593,3.866,605,2.624,null,3.457,610,2.624,null,2.624,null,2.624,null,2.624,null,2.624,null,1.954,null,2.24,null,2.624,null,2.624,null,2.624,null,2.24,null,2.24,null,2.24,null,2.24,null,2.24,null,1.954,null,1.954,null,2.624,null,2.24,null,1.954,633,3.206,null,3.206,null,3.206,null,3.206,null,3.206]],["name/22",[638,28.134]],["ref/22",[639,14.067]],["doc/22",[2,1.169,4,0.443,11,0.463,15,0.831,null,0.729,null,0.964,null,0.841,26,0.751,32,1.238,54,0.814,56,1.837,72,0.471,81,0.964,112,1.308,137,0.922,141,1.169,143,1.057,146,0.52,148,0.52,151,0.532,null,0.922,158,0.922,161,1.308,164,2.128,169,1.879,null,2.882,173,1.057,178,0.922,180,2.857,null,0.814,185,0.922,null,0.922,189,1.057,198,1.238,200,1.238,207,1.238,219,0.814,225,1.494,231,1.467,234,0.814,243,1.304,252,0.418,326,2.495,362,0.922,370,1.057,376,1.164,null,0.814,381,1.238,386,1.64,397,1.057,400,0.58,419,2.128,426,1.057,441,1.308,488,1.057,510,1.238,522,1.238,525,2.128,544,0.922,555,2.13,563,2.13,567,1.699,590,2.457,594,3.343,null,3.343,607,2.855,615,0.922,null,1.699,620,1.057,null,1.057,null,1.057,null,1.057,625,0.922,null,0.922,629,0.922,640,1.99,null,1.99,null,3.491,null,1.99,null,2.431,null,3.491,null,1.99,null,1.513,null,1.513,null,1.513,null,1.513,null,1.513,null,2.495,null,1.99,null,1.238,null,1.513,null,1.513,null,1.513,null,1.513,null,2.431,null,1.513,null,1.513,null,2.431,null,1.513,null,1.513,null,2.431,null,1.238,null,1.513,null,3.491,null,2.431,null,2.431,null,1.513,null,1.513,null,1.513,null,1.513,null,1.513,null,1.513,null,1.513,null,1.238,null,1.238,null,1.238,null,1.238,null,1.238,null,1.513,null,1.513,null,1.513,null,2.495,null,1.238,null,1.238,null,1.238,null,1.238,null,1.513,null,1.513,null,1.513,null,1.513,null,1.513,null,1.99,null,1.238,null,1.513,null,1.238,null,1.238,null,1.238,null,1.238,null,1.238,null,1.238,null,1.238,null,1.238,null,1.513,null,1.238,null,1.238,null,1.513,null,1.513]],["name/23",[712,28.134]],["ref/23",[713,14.067]],["doc/23",[4,0.41,11,0.469,15,0.423,17,0.892,null,1.061,23,1.177,26,0.796,61,1.528,72,0.744,74,0.936,81,1.172,141,1.239,148,0.752,151,0.708,null,1.333,164,1.97,null,1.177,169,2.069,null,2.762,173,1.528,178,1.333,185,1.333,189,1.528,192,2.645,216,1.79,225,1.645,231,1.239,243,1.645,252,0.604,362,1.333,376,1.047,386,1.177,400,0.839,419,2.343,441,1.177,450,1.79,488,1.528,525,2.343,555,1.528,563,1.528,567,2.259,590,2.412,607,2.686,615,1.333,624,1.528,null,1.333,null,1.333,628,2.686,null,1.333,640,2.645,null,2.645,643,3.146,646,3.146,652,2.645,null,1.79,null,1.79,666,1.79,678,1.79,null,1.79,null,1.79,null,1.79,null,1.79,686,2.645,null,1.79,null,1.79,null,1.79,null,1.79,696,2.645,null,1.79,699,1.79,null,1.79,null,1.79,null,1.79,null,1.79,null,1.79,null,1.79,null,1.79,708,2.645,null,1.79,714,2.187,null,2.187,null,3.232,null,2.187,null,3.844,null,3.844,null,2.187,null,2.187,null,2.187,null,2.187,null,2.187,null,2.187,null,2.187,null,2.187,null,3.232,null,2.187,null,2.187,null,2.187,null,2.187]]],"invertedIndex":[["sambo",[0,{"position":[[0,5]]}],[1,{"position":[[0,5]]}],[2,{"position":[[1,5],[62,5]]},5,{"position":[[2415,5],[3434,5]]},8,{"position":[[2506,5]]},56,{"position":[[0,5]]}]],["sequenti",[],[],[2,{"position":[[10,10]]},8,{"position":[[2,10]]},14,{"position":[[967,12]]},20,{"position":[[160,10]]}]],["model",[51,{"position":[[0,5]]}],[],[2,{"position":[[25,5],[718,7],[1251,5]]},5,{"position":[[2975,6],[3977,8]]},8,{"position":[[78,6],[1044,6],[1298,6],[1652,5]]},14,{"position":[[500,7]]},26,{"position":[[128,5]]},56,{"position":[[316,5]]},68,{"position":[[1006,5],[1762,5],[1826,5]]}]],["base",[],[],[2,{"position":[[31,5],[1257,5]]},5,{"position":[[3971,5]]},14,{"position":[[62,5]]},23,{"position":[[0,5]]},56,{"position":[[311,4]]}]],["optim",[6,{"position":[[0,9]]}],[],[2,{"position":[[37,12],[81,12],[482,12],[622,9],[740,12],[1156,13],[1263,13],[1362,14],[1733,10]]},5,{"position":[[363,13],[1350,10],[1969,12],[2540,12],[3653,5],[3849,5],[3990,13],[4170,8]]},8,{"position":[[13,9],[28,9],[301,9],[478,13],[1489,12],[1666,10],[2095,12],[2519,9],[2579,9],[2711,9]]},17,{"position":[[36,9],[160,9],[464,9],[773,9]]},20,{"position":[[12,12],[118,12],[171,12],[294,9],[482,12],[1093,12],[1135,12]]},23,{"position":[[89,12]]},26,{"position":[[0,12]]},29,{"position":[[19,9]]},32,{"position":[[23,12]]},35,{"position":[[20,13]]},44,{"position":[[38,12]]},53,{"position":[[4,12]]},56,{"position":[[72,8],[337,8],[694,13],[773,12],[1392,12]]},62,{"position":[[89,12]]},68,{"position":[[845,13],[1093,10],[1265,13],[1449,12]]},71,{"position":[[58,13],[422,12]]}]],["python",[],[],[2,{"position":[[54,7],[475,6]]}]],["global",[],[],[2,{"position":[[74,6],[128,6],[1149,6],[1355,6]]},5,{"position":[[3826,6]]}]],["framework",[],[],[2,{"position":[[94,9]]}]],["find",[],[],[2,{"position":[[108,7],[373,4]]},5,{"position":[[0,4]]}]],["approxim",[],[],[2,{"position":[[116,11]]},5,{"position":[[5,11]]}]],["optima",[],[],[2,{"position":[[135,6]]}]],["",[],[],[2,{"position":[[142,1],[239,1],[537,1],[570,1],[833,1],[888,1],[1777,1],[1844,1],[1904,1],[1906,2]]},5,{"position":[[106,1],[283,1],[382,1],[479,1],[1522,1],[1673,3],[1687,2],[1725,1],[1794,1],[1919,1],[2033,1],[2091,1],[2101,1],[2117,1],[2129,1],[2187,2],[2211,1],[2226,1],[2369,3],[2406,3],[2437,3],[2448,1],[2489,1],[2521,2],[2649,1],[2657,1],[2665,1],[2674,1],[2682,1],[2695,1],[2707,1],[2730,1],[2895,2],[2898,3],[2918,1],[2954,1],[2959,1],[3035,1],[3044,1],[3059,1],[3083,1],[3101,2],[3123,1],[3159,1],[3164,1],[3183,1],[3199,1],[3209,1],[3266,1],[3284,3],[3295,1],[3297,1],[3300,1],[3349,1],[3383,1],[3421,1],[3423,1],[3425,3],[3456,3],[3467,1],[3572,1],[3745,1],[4121,1]]},8,{"position":[[105,1],[399,1],[407,1],[497,1],[594,1],[716,1],[876,1],[937,1],[1064,1],[1152,1],[1237,1],[1421,1],[1427,1],[1576,1],[1881,1],[1979,1],[1990,1],[2168,1],[2177,1],[2288,1],[2298,1],[2367,1],[2497,3],[2529,3],[2557,1],[2575,3],[2589,1],[2638,1],[2648,3],[2659,1],[2707,3],[2721,1],[2760,1],[2770,3],[2786,1],[2804,3],[2810,1],[2853,3]]},11,{"position":[[130,1],[150,2],[153,1],[155,2],[354,1],[361,1],[369,1],[377,1]]},14,{"position":[[157,1],[295,1],[452,1],[788,1],[884,1],[997,1],[1198,1],[1202,1],[1217,3],[1232,1],[1273,3],[1307,1],[1318,1]]},17,{"position":[[94,1],[98,1],[137,1],[141,2],[261,1],[335,1],[446,1],[615,1],[625,1],[666,3],[681,1],[713,3],[718,1],[783,3],[804,1],[819,3]]},20,{"position":[[240,1],[330,1],[386,1],[397,1],[596,1],[612,2],[728,1],[878,1],[1187,3],[1198,1],[1227,3]]},23,{"position":[[136,1],[296,1],[357,1],[361,1],[407,1],[450,3],[470,3],[489,1]]},26,{"position":[[83,1],[117,1],[125,1],[134,1]]},35,{"position":[[55,1]]},38,{"position":[[34,1]]},47,{"position":[[84,1]]},50,{"position":[[40,1]]},56,{"position":[[263,1],[291,1],[426,1],[624,1],[715,1],[853,1],[972,1],[1036,1],[1047,1],[1058,1],[1073,1],[1085,1],[1102,1],[1118,1],[1141,2],[1182,1],[1357,1]]},59,{"position":[[110,1],[125,3],[161,3],[198,3],[209,1],[244,1],[255,1],[287,2],[315,3],[339,3],[366,3],[395,3]]},62,{"position":[[136,1],[324,1],[418,1],[508,1]]},65,{"position":[[206,1],[394,1],[558,1],[575,1],[665,1]]},68,{"position":[[921,1],[1428,1],[1477,1],[1576,1],[1589,1],[1700,1],[1802,1],[1876,1],[1944,1],[2038,1],[2128,2],[2131,1],[2143,1],[2300,1],[2555,1],[2805,1],[2824,1]]},71,{"position":[[400,1],[448,1],[660,1],[750,2],[753,1],[765,1],[916,1],[1042,1],[1398,1],[1431,2],[1451,1]]}]],["arbitrari",[],[],[2,{"position":[[147,9],[680,9]]}]],["high",[],[],[2,{"position":[[157,4]]}]],["dimension",[],[],[2,{"position":[[162,11]]},5,{"position":[[2348,11]]}]],["object",[],[],[2,{"position":[[174,9],[1828,9]]},5,{"position":[[31,9],[147,9],[436,9],[2793,9]]},8,{"position":[[41,9],[146,9],[551,9],[990,9],[1939,9],[2204,9]]},14,{"position":[[41,9]]},17,{"position":[[68,9],[313,9],[417,9]]},20,{"position":[[257,9]]},23,{"position":[[15,9],[374,9]]},38,{"position":[[9,9]]},41,{"position":[[10,9]]},50,{"position":[[0,9]]},62,{"position":[[373,9]]},65,{"position":[[90,9],[443,9]]},68,{"position":[[104,9],[188,9],[266,9],[523,9],[777,9],[1060,9],[1851,9]]},71,{"position":[[1237,7]]}]],["function",[],[],[2,{"position":[[184,9],[218,8],[241,8],[510,8]]},5,{"position":[[41,8],[157,8],[446,8],[1562,8],[1982,9],[2803,8]]},8,{"position":[[51,8],[156,8],[561,8],[756,8],[1000,8],[1949,8],[2045,8],[2214,8]]},11,{"position":[[12,9]]},14,{"position":[[118,9],[344,8],[680,10]]},17,{"position":[[78,8],[323,9],[427,8],[591,8]]},20,{"position":[[80,9],[267,9]]},23,{"position":[[25,8]]},38,{"position":[[19,8]]},41,{"position":[[20,8]]},50,{"position":[[10,8]]},59,{"position":[[21,9]]},62,{"position":[[383,9]]},65,{"position":[[453,9]]},68,{"position":[[114,9],[198,9],[276,8],[787,9],[1070,8],[1768,8],[1861,9]]}]],["number",[],[],[2,{"position":[[208,6]]},5,{"position":[[63,6],[1865,6],[2043,7]]},8,{"position":[[900,6],[953,6],[1080,6],[1170,6],[1254,6],[2194,6],[2438,6]]},14,{"position":[[173,6]]},20,{"position":[[59,6],[365,6],[756,6],[894,6],[1165,6]]},23,{"position":[[157,6],[212,6]]},41,{"position":[[0,6]]},44,{"position":[[0,6]]},56,{"position":[[665,6]]},68,{"position":[[545,6],[1495,6],[1607,6],[1719,6]]},71,{"position":[[466,6],[607,6]]}]],["evalu",[],[],[2,{"position":[[227,11],[250,11]]},5,{"position":[[73,12]]},8,{"position":[[971,11],[2223,11]]},14,{"position":[[51,10]]},17,{"position":[[721,8]]},20,{"position":[[90,12],[242,10],[930,8]]},23,{"position":[[222,9]]},41,{"position":[[29,12]]},59,{"position":[[97,11]]},68,{"position":[[828,9],[1636,8],[2501,9]]},71,{"position":[[41,9],[322,10],[1353,11]]}]],["consid",[],[],[2,{"position":[[266,10]]}]],["expens",[],[],[2,{"position":[[281,11]]}]],["resourc",[],[],[2,{"position":[[293,8]]}]],["sometim",[],[],[2,{"position":[[310,9]]}]],["take",[],[],[2,{"position":[[320,4]]},5,{"position":[[184,4]]},8,{"position":[[183,4]]},17,{"position":[[606,5]]},71,{"position":[[1292,4]]}]],["week",[],[],[2,{"position":[[325,5]]}]],["obtain",[],[],[2,{"position":[[334,6]]}]],["result",[],[],[2,{"position":[[341,10]]},5,{"position":[[1155,7],[1400,8],[1781,8],[2441,6],[2524,6],[3460,6]]},8,{"position":[[2354,8],[2652,6]]},14,{"position":[[518,9]]},20,{"position":[[131,7],[1078,7],[1191,6]]},26,{"position":[[13,7]]},56,{"position":[[1378,6]]},59,{"position":[[202,6]]},62,{"position":[[128,7],[303,7]]},65,{"position":[[198,7],[373,7],[550,7]]},68,{"position":[[1421,6],[1462,7],[2420,7]]},71,{"position":[[393,6],[435,7]]}]],["it'",[],[],[2,{"position":[[355,4]]}]],["import",[],[],[2,{"position":[[360,9]]},5,{"position":[[2393,6],[2421,6],[3440,6]]},8,{"position":[[2512,6]]},11,{"position":[[246,9]]},59,{"position":[[129,6],[185,6]]}]],["good",[],[],[2,{"position":[[378,4]]}]],["enough",[],[],[2,{"position":[[383,6]]}]],["solut",[],[],[2,{"position":[[390,9]]},8,{"position":[[1100,9]]},14,{"position":[[18,9],[193,9],[394,10],[1101,10]]},17,{"position":[[740,9]]},23,{"position":[[66,9],[171,9],[232,10],[257,9],[440,9]]},35,{"position":[[4,8]]}]],["few",[],[],[2,{"position":[[407,3]]},68,{"position":[[1222,3]]}]],["step",[],[],[2,{"position":[[411,5]]},20,{"position":[[590,5]]}]],["possibl",[],[],[2,{"position":[[420,8]]}]],["whenc",[],[],[2,{"position":[[429,7]]}]],["_sequential_",[],[],[2,{"position":[[437,14]]}]],["main",[],[],[2,{"position":[[456,4]]}]],["tool",[],[],[2,{"position":[[461,5]]}]],["toolbox",[],[],[2,{"position":[[495,7]]}]],["sambo.minim",[],[4,{"position":[[0,14]]}],[2,{"position":[[520,16]]},56,{"position":[[816,16]]}]],["near",[],[],[2,{"position":[[541,4]]}]],["drop",[],[],[2,{"position":[[546,4],[849,4]]}]],["replac",[],[],[2,{"position":[[554,11],[857,11]]}]],["scipy.optimize.minim",[],[],[2,{"position":[[572,25]]}]],["sp_opt_min",[],[],[2,{"position":[[598,14],[2121,13]]}]],["class",[],[],[2,{"position":[[615,5]]},5,{"position":[[2164,5]]}]],["ask",[12,{"position":[[0,3]]}],[],[2,{"position":[[640,3]]},8,{"position":[[341,3],[2687,3]]},17,{"position":[[559,3]]},20,{"position":[[234,5],[598,3]]}]],["tell",[15,{"position":[[0,4]]}],[],[2,{"position":[[648,4]]},8,{"position":[[345,4],[2691,4]]},17,{"position":[[758,4]]},20,{"position":[[323,6],[607,4]]}]],["user",[],[],[2,{"position":[[653,4]]}]],["interfac",[],[],[2,{"position":[[658,10]]},8,{"position":[[2696,10]]}]],["support",[],[],[2,{"position":[[669,10]]},56,{"position":[[529,8]]}]],["scikit",[],[],[2,{"position":[[690,6],[873,6],[2071,6],[2243,6]]},5,{"position":[[4147,6]]},8,{"position":[[1600,6],[1822,6]]},56,{"position":[[151,6],[195,6],[1245,6],[1437,6]]}]],["learn",[],[],[2,{"position":[[697,5],[954,8],[1242,8]]},8,{"position":[[1607,5],[1829,5]]},56,{"position":[[108,8],[158,6],[202,6]]}]],["surrog",[],[],[2,{"position":[[708,9],[1224,9]]},5,{"position":[[3961,9]]},8,{"position":[[68,9],[1034,9],[1288,9],[1642,9]]},14,{"position":[[83,9],[490,9]]},68,{"position":[[996,9]]}]],["bayesian",[],[],[2,{"position":[[731,8]]}]],["estim",[],[],[2,{"position":[[753,10]]},5,{"position":[[2132,9]]},8,{"position":[[1376,10],[1566,9]]},11,{"position":[[343,10]]},56,{"position":[[117,9],[281,9]]},62,{"position":[[61,8]]},68,{"position":[[391,9],[978,10],[1037,10],[1133,9],[1149,9],[1804,9],[1836,10]]}]],["gaussian",[],[],[2,{"position":[[769,9],[1909,9]]},8,{"position":[[1706,9]]}]],["process",[],[],[2,{"position":[[779,8],[1919,9]]},8,{"position":[[1716,9]]},20,{"position":[[25,7],[1106,8]]},23,{"position":[[102,7]]},56,{"position":[[1405,8]]},62,{"position":[[102,8]]}]],["extra",[],[],[2,{"position":[[792,6],[1981,6]]},8,{"position":[[1731,6]]}]],["tree",[],[],[2,{"position":[[799,7],[1988,7]]},8,{"position":[[1738,7]]}]],["built",[],[],[2,{"position":[[807,5]]},11,{"position":[[334,5]]},71,{"position":[[1381,5]]}]],["sambosearchcv",[54,{"position":[[0,13]]}],[],[2,{"position":[[819,13]]}]],["much",[],[],[2,{"position":[[837,4]]},56,{"position":[[224,4]]}]],["faster",[],[],[2,{"position":[[842,6]]},56,{"position":[[229,6]]}]],["learn'",[],[],[2,{"position":[[880,7]]}]],["gridsearchcv",[],[],[2,{"position":[[890,12]]},56,{"position":[[177,12],[1184,12]]}]],["skl_gridsearchcv",[],[],[2,{"position":[[903,19],[2216,19]]},56,{"position":[[1197,20],[1218,19]]}]],["similar",[],[],[2,{"position":[[927,7]]},56,{"position":[[165,7]]}]],["exhaust",[],[],[2,{"position":[[935,10]]}]],["machin",[],[],[2,{"position":[[946,7],[1234,7]]},56,{"position":[[100,7]]}]],["hyper",[],[],[2,{"position":[[963,5]]},56,{"position":[[6,5]]}]],["paramet",[],[],[2,{"position":[[969,9]]},5,{"position":[[86,10],[220,10],[514,9],[1622,9],[1947,10]]},8,{"position":[[85,10],[219,10],[816,9]]},11,{"position":[[229,10]]},14,{"position":[[128,10],[608,10],[855,10]]},17,{"position":[[243,10]]},20,{"position":[[703,10]]},23,{"position":[[118,10]]},47,{"position":[[8,9]]},56,{"position":[[12,9],[246,9],[265,10],[346,10],[449,10],[493,9],[554,9],[591,9],[1000,10]]},62,{"position":[[111,10]]},65,{"position":[[181,10]]},68,{"position":[[1405,10],[2400,10]]},71,{"position":[[365,11],[377,10],[1297,9]]}]],["tune",[],[],[2,{"position":[[979,6]]}]],["method",[],[],[2,{"position":[[986,8],[1036,8],[1076,7]]},8,{"position":[[368,7],[1869,8]]},11,{"position":[[287,6]]},17,{"position":[[563,6]]},20,{"position":[[144,6],[226,6],[315,6],[451,6]]},56,{"position":[[406,8],[708,6],[808,6]]},71,{"position":[[1390,7]]}]],["compar",[],[],[2,{"position":[[999,8]]}]],["unpredict",[],[],[2,{"position":[[1011,13]]}]],["stochast",[],[],[2,{"position":[[1025,10]]}]],["_informed_",[],[],[2,{"position":[[1045,11]]}]],["algorithm",[],[],[2,{"position":[[1061,10],[1793,10]]},5,{"position":[[2258,11],[3608,9]]},44,{"position":[[51,10]]},56,{"position":[[786,9]]}]],["implement",[],[],[2,{"position":[[1084,11],[1194,15],[1417,15]]},11,{"position":[[297,9]]},56,{"position":[[374,9]]}]],["us",[],[],[2,{"position":[[1102,4]]},8,{"position":[[60,5],[318,4],[358,5],[1308,3],[1344,6],[2677,5]]},11,{"position":[[211,3]]},14,{"position":[[280,5],[353,4],[866,4],[963,3]]},20,{"position":[[220,5],[529,3],[859,5],[1028,5]]},53,{"position":[[26,5]]},56,{"position":[[63,4],[799,4]]},62,{"position":[[269,4]]},65,{"position":[[339,4]]},68,{"position":[[1740,3],[1991,3],[2233,4],[2382,4]]},71,{"position":[[484,3],[534,4],[603,3],[855,4]]}]],["packag",[],[],[2,{"position":[[1115,7]]}]],["simplic",[],[],[2,{"position":[[1129,10],[1335,10]]}]],["homolog",[],[],[2,{"position":[[1140,8],[1346,8]]},5,{"position":[[3599,8]]}]],["shgo",[],[],[2,{"position":[[1170,7]]},56,{"position":[[717,8]]}]],["custom",[],[],[2,{"position":[[1178,11]]}]],["scipi",[],[],[2,{"position":[[1215,7],[1438,7]]}]],["shuffl",[],[],[2,{"position":[[1278,9],[1523,9]]},5,{"position":[[3762,8]]}]],["complex",[],[],[2,{"position":[[1288,7],[1533,7]]},5,{"position":[[3771,7]]}]],["evolut",[],[],[2,{"position":[[1296,10],[1541,11]]},5,{"position":[[3779,9]]}]],["sce",[],[],[2,{"position":[[1307,4]]},5,{"position":[[2249,4],[2270,4]]}]],["ua",[],[],[2,{"position":[[1312,2]]},5,{"position":[[2254,3],[2275,4]]}]],["improv",[],[],[2,{"position":[[1320,14]]},8,{"position":[[1199,11],[1527,12]]}]],["http",[],[],[2,{"position":[[1377,5],[1446,6],[1553,6],[1929,6],[1996,6],[2064,6],[2135,6],[2236,6]]},5,{"position":[[1288,6],[2280,6],[3679,6],[3887,6],[4030,6],[4197,6]]},14,{"position":[[699,6]]},56,{"position":[[1238,6],[1430,6]]},65,{"position":[[127,6]]}]],["doi.org/10.1007/s10898",[],[],[2,{"position":[[1383,22]]},5,{"position":[[3686,22]]}]],["018",[],[],[2,{"position":[[1406,3]]},5,{"position":[[3709,3]]}]],["0645",[],[],[2,{"position":[[1410,4]]},5,{"position":[[3713,4]]}]],["y",[],[],[2,{"position":[[1415,1]]},5,{"position":[[264,1],[3718,1]]},8,{"position":[[263,1],[2808,1]]},17,{"position":[[96,1],[259,1],[444,1],[492,1],[613,1]]},20,{"position":[[1268,1]]},23,{"position":[[359,1]]}]],["docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.shgo.html",[],[],[2,{"position":[[1453,69]]}]],["doi.org/10.1007/bf00939380",[],[],[2,{"position":[[1560,26]]},5,{"position":[[2287,26],[3894,26]]}]],["open",[],[],[2,{"position":[[1592,4]]},14,{"position":[[623,4]]}]],["sourc",[],[],[2,{"position":[[1597,6]]}]],["project",[],[],[2,{"position":[[1604,7],[1655,8],[1704,7]]}]],["heavili",[],[],[2,{"position":[[1616,7]]}]],["inspir",[],[],[2,{"position":[[1625,8]]}]],["_scikit",[],[],[2,{"position":[[1637,7]]}]],["optimize_",[],[],[2,{"position":[[1645,9]]}]],["now",[],[],[2,{"position":[[1670,3]]}]],["seem",[],[],[2,{"position":[[1674,5]]}]],["helplessli",[],[],[2,{"position":[[1680,10]]}]],["defunct",[],[],[2,{"position":[[1691,8]]}]],["on",[],[],[2,{"position":[[1715,3]]},5,{"position":[[1220,4],[1270,4],[2832,3],[2846,3],[2860,3]]},62,{"position":[[5,3]]},65,{"position":[[5,3]]},68,{"position":[[605,3],[748,3]]}]],["better",[],[],[2,{"position":[[1726,6]]},17,{"position":[[208,6]]}]],["around",[],[],[2,{"position":[[1744,6]]},17,{"position":[[645,7]]}]],["accord",[],[],[2,{"position":[[1751,9]]},14,{"position":[[1158,9]]}]],["benchmark",[],[],[2,{"position":[[1764,12]]}]],["contain",[],[],[2,{"position":[[1783,9]]},14,{"position":[[1067,10]]},59,{"position":[[11,8]]}]],["seek",[],[],[2,{"position":[[1804,4]]}]],["_minimize_",[],[],[2,{"position":[[1812,10]]}]],["f(x",[],[],[2,{"position":[[1839,4],[1899,4]]}]],["instead",[],[],[2,{"position":[[1853,7]]}]],["need",[],[],[2,{"position":[[1861,4]]},5,{"position":[[1212,4]]},20,{"position":[[548,4]]},56,{"position":[[365,5]]}]],["_maximum_",[],[],[2,{"position":[[1870,10]]}]],["simpli",[],[],[2,{"position":[[1881,6]]}]],["minim",[3,{"position":[[0,8]]}],[],[2,{"position":[[1888,8]]},5,{"position":[[169,9],[1677,9],[2428,8],[2779,10],[3447,8],[3833,13]]},8,{"position":[[168,9]]}]],["www.gaussianprocess.org/gpml/chapters/rw.pdf",[],[],[2,{"position":[[1936,44]]}]],["doi.org/10.1007/s10994",[],[],[2,{"position":[[2003,22]]}]],["006",[],[],[2,{"position":[[2026,3]]}]],["6226",[],[],[2,{"position":[[2030,4]]}]],["1",[],[],[2,{"position":[[2035,1]]},5,{"position":[[1717,2],[2604,2],[2607,1],[2609,1],[2611,1],[2613,1],[2615,1],[2617,1],[2619,1],[2621,1],[2623,2],[2654,2],[2670,2],[2676,2],[2679,1],[2684,1],[2686,2],[2689,2],[2692,1],[2697,1],[2699,1],[3061,2],[4057,1]]},8,{"position":[[1252,1],[2192,1],[2290,2]]},14,{"position":[[1200,1]]},23,{"position":[[151,1]]},56,{"position":[[1427,2]]}]],["kernel",[],[],[2,{"position":[[2037,7]]}]],["ridg",[],[],[2,{"position":[[2045,5]]}]],["regress",[],[],[2,{"position":[[2051,12]]}]],["learn.org/stable/modules/kernel_ridge.html",[],[],[2,{"position":[[2078,42]]}]],["docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html",[],[],[2,{"position":[[2142,73]]}]],["learn.org/stable/modules/generated/sklearn.model_selection.gridsearchcv.html",[],[],[2,{"position":[[2250,76]]},56,{"position":[[1252,76]]}]],["optimum",[],[],[5,{"position":[[17,7]]},8,{"position":[[1519,7]]},65,{"position":[[108,8]]},68,{"position":[[1395,9]]}]],["fun",[36,{"position":[[0,3]]}],[],[5,{"position":[[102,3],[2592,4]]},8,{"position":[[101,3]]}]],["callabl",[],[],[5,{"position":[[108,8],[1524,8]]},8,{"position":[[107,8],[718,8],[1992,8]]},14,{"position":[[297,9]]}]],["np.ndarray",[],[],[5,{"position":[[117,12],[1533,12]]},8,{"position":[[116,12],[727,12]]},14,{"position":[[1012,10]]},23,{"position":[[298,10],[363,10]]}]],["float",[],[],[5,{"position":[[130,7],[746,7],[1471,8]]},8,{"position":[[129,7],[1429,6],[1883,5]]},14,{"position":[[790,5]]},17,{"position":[[263,5],[337,5]]},62,{"position":[[326,6]]},65,{"position":[[396,6]]},68,{"position":[[1878,6],[2310,7],[2557,6]]},71,{"position":[[918,6],[1044,6]]}]],["option",[],[],[5,{"position":[[138,8],[307,8],[391,8],[494,8],[1553,8],[1849,8],[1927,8],[2000,7]]},8,{"position":[[137,8],[422,8],[506,8],[609,8],[747,8],[883,8],[944,8],[1071,8],[1685,7],[1906,8],[2025,8],[2422,8]]},14,{"position":[[164,8]]},17,{"position":[[359,8]]},20,{"position":[[735,8],[885,8]]},56,{"position":[[631,9],[744,9],[922,8],[980,8]]},62,{"position":[[333,8],[439,9]]},65,{"position":[[403,8],[596,9]]}]],["singl",[],[],[5,{"position":[[191,6]]},8,{"position":[[190,6]]},68,{"position":[[164,6]]}]],["array",[],[],[5,{"position":[[198,5]]},8,{"position":[[197,5]]},14,{"position":[[944,5],[1026,5],[1288,6]]}]],["argument",[],[],[5,{"position":[[209,8],[411,9]]},8,{"position":[[208,8],[526,9]]}]],["x",[33,{"position":[[0,1]]}],[],[5,{"position":[[218,1],[1644,1],[1709,2],[2510,2],[2601,2],[2956,1],[3161,1]]},8,{"position":[[217,1],[838,1],[2835,1]]},17,{"position":[[139,1],[333,1],[623,1]]},20,{"position":[[1265,2]]},23,{"position":[[294,1],[405,1]]},38,{"position":[[32,1]]},59,{"position":[[276,2]]},68,{"position":[[2398,1]]}]],["combin",[],[],[5,{"position":[[231,12],[1632,11]]},8,{"position":[[230,12],[826,11]]}]],["return",[],[],[5,{"position":[[248,6],[1602,6],[3085,6],[3268,6]]},8,{"position":[[247,6],[796,6],[2130,7],[2559,6]]},14,{"position":[[999,7]]},20,{"position":[[107,6],[1034,7]]},23,{"position":[[271,9],[281,7]]},62,{"position":[[491,7]]},65,{"position":[[648,7]]},68,{"position":[[2807,7]]},71,{"position":[[1434,7]]}]],["scalar",[],[],[5,{"position":[[257,6]]},8,{"position":[[256,6]]}]],["cost",[],[],[5,{"position":[[266,5]]},8,{"position":[[265,5]]}]],["valu",[],[],[5,{"position":[[272,7],[625,7],[839,6],[911,7],[1480,6]]},8,{"position":[[271,7]]},14,{"position":[[245,5],[953,6]]},17,{"position":[[87,6],[436,6],[494,6]]},20,{"position":[[819,5],[988,5]]},23,{"position":[[34,7],[384,6]]},38,{"position":[[0,5]]},50,{"position":[[19,6]]},56,{"position":[[521,7]]},62,{"position":[[360,5]]},65,{"position":[[430,5],[533,6]]},68,{"position":[[352,6],[533,5]]},71,{"position":[[525,5],[646,7]]}]],["x0",[],[],[5,{"position":[[280,2]]},8,{"position":[[396,2],[1976,2]]},68,{"position":[[2114,6]]},71,{"position":[[736,6]]}]],["tupl",[],[],[5,{"position":[[285,5],[384,6]]},8,{"position":[[401,5],[499,6]]},62,{"position":[[241,5]]},65,{"position":[[311,5]]}]],["list[tupl",[],[],[5,{"position":[[294,12],[481,12]]},8,{"position":[[409,12],[596,12]]}]],["initi",[],[],[5,{"position":[[316,7],[2054,7]]},8,{"position":[[431,7],[963,7],[1915,7]]},14,{"position":[[262,14]]},20,{"position":[[841,14],[1010,14]]}]],["guess(",[],[],[5,{"position":[[324,9]]},8,{"position":[[439,9]]}]],["start",[],[],[5,{"position":[[337,8]]},8,{"position":[[452,8]]}]],["point(",[],[],[5,{"position":[[346,8]]},8,{"position":[[461,8]]},17,{"position":[[378,8]]},68,{"position":[[2351,8]]}]],["arg",[],[],[5,{"position":[[377,4]]},8,{"position":[[492,4]]}]],["addit",[],[],[5,{"position":[[400,10],[1936,10]]},8,{"position":[[515,10]]},26,{"position":[[90,10]]},56,{"position":[[989,10]]}]],["pass",[],[],[5,{"position":[[424,4],[1961,4]]},8,{"position":[[539,4]]},14,{"position":[[601,6]]},56,{"position":[[1014,4]]},68,{"position":[[1541,6],[2770,6]]}]],["constraint",[],[],[5,{"position":[[459,12],[1510,11],[1584,12],[1660,12]]},8,{"position":[[574,12],[704,11],[778,12],[854,12]]}]],["bound",[],[],[5,{"position":[[472,6],[503,6],[2466,9],[2887,7],[3288,6]]},8,{"position":[[587,6],[618,6],[2621,9],[2743,9]]},11,{"position":[[124,5]]},14,{"position":[[434,5],[849,5]]},59,{"position":[[227,9]]}]],["variabl",[],[],[5,{"position":[[524,10],[1250,9],[2821,10],[2872,8]]},8,{"position":[[642,10]]},68,{"position":[[88,8],[370,9],[462,10],[2090,10]]},71,{"position":[[185,9],[712,10]]}]],["sequenc",[],[],[5,{"position":[[547,8]]},8,{"position":[[655,8]]},47,{"position":[[48,9]]},59,{"position":[[85,8]]},71,{"position":[[1161,8]]}]],["min",[],[],[5,{"position":[[559,5],[656,3],[730,3]]},8,{"position":[[667,5]]}]],["max",[],[],[5,{"position":[[565,4],[665,3],[738,3]]},8,{"position":[[673,4]]}]],["pair",[],[],[5,{"position":[[570,5]]},8,{"position":[[678,5]]}]],["each",[],[],[5,{"position":[[580,4]]},8,{"position":[[688,4],[2075,4]]},20,{"position":[[942,4]]},68,{"position":[[83,4],[1674,4],[1780,4],[1917,4]]},71,{"position":[[180,4],[1083,4],[1369,4]]}]],["dimens",[],[],[5,{"position":[[585,10],[641,10],[687,9],[758,9],[864,9],[1098,11],[1449,10]]},8,{"position":[[693,10]]},68,{"position":[[171,9],[302,11],[616,10],[705,10],[759,10],[1679,10],[2080,9],[2179,9],[2255,10],[2627,11]]},71,{"position":[[548,11],[592,10],[702,9],[801,9],[877,10]]}]],["enumer",[],[],[5,{"position":[[602,11],[1006,13]]},56,{"position":[[601,13]]}]],["nomin",[],[],[5,{"position":[[617,7],[947,8],[996,9],[1177,8],[1242,7],[2864,7]]}]],["integ",[],[],[5,{"position":[[673,9],[1441,7]]},68,{"position":[[2619,7]]},71,{"position":[[584,7]]}]],["assum",[],[],[5,{"position":[[700,7],[771,7],[877,7]]},17,{"position":[[474,7]]},65,{"position":[[500,7]]}]],["_integral_",[],[],[5,{"position":[[714,11]]}]],["_real_",[],[],[5,{"position":[[785,7]]}]],["case",[],[],[5,{"position":[[806,5],[1196,7]]}]],["includ",[],[],[5,{"position":[[812,9]]},8,{"position":[[1693,7]]},68,{"position":[[2203,8]]},71,{"position":[[825,8]]}]],["more",[],[],[5,{"position":[[825,4],[1498,4],[2755,4]]},32,{"position":[[0,4]]}]],["two",[],[],[5,{"position":[[835,3]]},68,{"position":[[298,3],[366,3],[612,3],[755,3]]}]],["provid",[],[],[5,{"position":[[850,9]]},8,{"position":[[1788,7]]},17,{"position":[[0,7]]},20,{"position":[[825,8],[994,8]]},68,{"position":[[926,10]]}]],["_enumeration_",[],[],[5,{"position":[[894,13]]}]],["see",[],[],[5,{"position":[[919,3],[2160,3],[2881,4]]},14,{"position":[[533,4]]},56,{"position":[[804,3],[1161,3],[1414,3]]}]],["_examples_",[],[],[5,{"position":[[923,10]]}]],["below",[],[],[5,{"position":[[934,6]]},8,{"position":[[1544,5]]},68,{"position":[[224,5]]},71,{"position":[[201,5]]}]],["note",[],[],[5,{"position":[[942,4]]},11,{"position":[[194,4]]},14,{"position":[[1112,5]]},68,{"position":[[938,4]]}]],["repres",[],[],[5,{"position":[[960,11],[1074,11],[1571,12]]},8,{"position":[[765,12]]}]],["ordin",[],[],[5,{"position":[[975,8]]}]],["categor",[],[],[5,{"position":[[984,11]]},68,{"position":[[2603,11]]},71,{"position":[[568,11]]}]],["although",[],[],[5,{"position":[[1020,8]]}]],["inher",[],[],[5,{"position":[[1039,10]]}]],["order",[],[],[5,{"position":[[1050,8]]},71,{"position":[[14,5],[290,5]]}]],["intern",[],[],[5,{"position":[[1063,10]]}]],["integr",[],[],[5,{"position":[[1089,8],[2836,9]]}]],["appear",[],[],[5,{"position":[[1118,7]]}]],["significantli",[],[],[5,{"position":[[1129,13]]}]],["affect",[],[],[5,{"position":[[1143,6]]}]],["e.g",[],[],[5,{"position":[[1163,5]]},68,{"position":[[1357,5]]}]],["span",[],[],[5,{"position":[[1186,4]]}]],["mani",[],[],[5,{"position":[[1191,4]]},68,{"position":[[2480,4]]}]],["hot",[],[],[5,{"position":[[1225,3],[1275,3],[1321,3]]}]],["encod",[],[],[5,{"position":[[1229,7],[1279,8]]}]],["manual",[],[],[5,{"position":[[1260,9]]}]],["en.wikipedia.org/wiki/on",[],[],[5,{"position":[[1295,25]]}]],["warn",[],[],[5,{"position":[[1326,7]]},17,{"position":[[579,7]]}]],["mind",[],[],[5,{"position":[[1334,4]]}]],["dot",[],[],[5,{"position":[[1343,3]]},68,{"position":[[803,4]]}]],["problem",[],[],[5,{"position":[[1366,7]]}]],["fail",[],[],[5,{"position":[[1374,5]]}]],["produc",[],[],[5,{"position":[[1383,7]]}]],["expect",[],[],[5,{"position":[[1391,8]]}]],["make",[],[],[5,{"position":[[1409,4],[1493,4]]},11,{"position":[[202,4]]},20,{"position":[[505,6]]}]],["sure",[],[],[5,{"position":[[1414,4]]}]],["you'r",[],[],[5,{"position":[[1419,6]]}]],["specifi",[],[],[5,{"position":[[1430,10]]},14,{"position":[[222,10]]},20,{"position":[[49,9],[796,10],[965,10],[1155,9]]}]],["real",[],[],[5,{"position":[[1466,4],[2850,5]]},71,{"position":[[543,4]]}]],["sens",[],[],[5,{"position":[[1503,6]]}]],["bool",[],[],[5,{"position":[[1546,6],[1727,5]]},8,{"position":[[740,6],[2018,6],[2300,5]]}]],["true",[],[],[5,{"position":[[1609,4],[2587,4]]},8,{"position":[[803,4],[2138,4]]},62,{"position":[[346,4]]},65,{"position":[[416,4]]},68,{"position":[[1055,4]]}]],["iff",[],[],[5,{"position":[[1614,3]]},8,{"position":[[808,3]]}]],["satisfi",[],[],[5,{"position":[[1646,9]]},8,{"position":[[840,9]]}]],["constraints=lambda",[],[],[5,{"position":[[1690,18],[2491,18]]},59,{"position":[[257,18]]}]],["lb",[],[],[5,{"position":[[1712,3]]}]],["disp",[],[],[5,{"position":[[1720,4]]},8,{"position":[[2293,4]]}]],["default",[],[],[5,{"position":[[1733,7]]},8,{"position":[[1159,7],[1244,7],[1436,7],[2184,7],[2306,7]]},14,{"position":[[237,7],[307,7],[408,8],[812,7]]},20,{"position":[[811,7],[980,7]]},23,{"position":[[143,7]]},68,{"position":[[2101,8],[2225,7],[2374,7],[2639,7]]},71,{"position":[[723,8],[847,7],[978,7]]}]],["fals",[],[],[5,{"position":[[1741,5]]},8,{"position":[[2314,5]]}]],["display",[],[],[5,{"position":[[1747,7]]},8,{"position":[[2320,7]]}]],["progress",[],[],[5,{"position":[[1755,8]]},8,{"position":[[2328,8]]}]],["intermedi",[],[],[5,{"position":[[1768,12]]},8,{"position":[[2341,12]]}]],["rng",[],[],[5,{"position":[[1790,3]]},8,{"position":[[1416,4],[2363,3]]},56,{"position":[[849,3]]}]],["int",[],[],[5,{"position":[[1796,3]]},8,{"position":[[878,4],[939,4],[1066,4],[1154,4],[1239,4],[2179,4],[2369,3]]},14,{"position":[[159,4]]},20,{"position":[[730,4],[880,4]]},23,{"position":[[138,4]]},56,{"position":[[626,4],[855,3]]},68,{"position":[[1479,4],[1591,4],[1702,4],[2153,4],[2445,4]]},71,{"position":[[450,4],[775,4]]}]],["np.random.randomst",[],[],[5,{"position":[[1803,21]]},8,{"position":[[2376,21]]},56,{"position":[[862,21]]}]],["np.random.gener",[],[],[5,{"position":[[1828,20]]},8,{"position":[[2401,20]]}]],["random",[],[],[5,{"position":[[1858,6]]},8,{"position":[[1365,10],[2431,6]]},20,{"position":[[665,6]]},56,{"position":[[931,6]]},68,{"position":[[555,6]]}]],["gener",[],[],[5,{"position":[[1872,9]]},8,{"position":[[1110,9],[1278,9],[2445,9]]}]],["seed",[],[],[5,{"position":[[1885,4]]},8,{"position":[[2458,4]]},56,{"position":[[938,4]]}]],["reproduc",[],[],[5,{"position":[[1894,16]]},8,{"position":[[2467,16]]},56,{"position":[[947,16]]}]],["kwarg",[],[],[5,{"position":[[1912,6]]},56,{"position":[[965,6]]}]],["dict",[],[],[5,{"position":[[1921,5]]},56,{"position":[[428,4],[974,5]]}]],["popular",[],[],[5,{"position":[[1992,7]]},8,{"position":[[1677,7]]}]],["method=\"shgo",[],[],[5,{"position":[[2019,13]]}]],["n_init",[],[],[5,{"position":[[2036,6],[2094,6]]},8,{"position":[[930,6]]}]],["point",[],[],[5,{"position":[[2062,8]]},8,{"position":[[1326,5]]},17,{"position":[[130,6]]},23,{"position":[[324,6],[394,6]]},50,{"position":[[29,6]]},68,{"position":[[821,6],[1617,6],[2511,6]]},71,{"position":[[29,6],[252,7],[1181,7]]}]],["method=\"smbo",[],[],[5,{"position":[[2077,13]]}]],["n_candid",[],[],[5,{"position":[[2104,12]]},8,{"position":[[1051,12],[2275,12]]},14,{"position":[[144,12],[1042,14],[1185,12]]},20,{"position":[[865,12]]}]],["n_model",[],[],[5,{"position":[[2120,8]]},8,{"position":[[1228,8]]}]],["explan",[],[],[5,{"position":[[2147,12]]},56,{"position":[[1148,12]]}]],["sambo.optim",[],[7,{"position":[[0,15]]}],[5,{"position":[[2171,15]]}]],["method=\"sceua",[],[],[5,{"position":[[2196,14]]}]],["n_complex",[],[],[5,{"position":[[2214,11]]}]],["complex_s",[],[],[5,{"position":[[2229,12]]}]],["exampl",[],[],[5,{"position":[[2314,8],[2360,8],[2770,8]]},8,{"position":[[2484,8]]},14,{"position":[[1204,8]]},17,{"position":[[653,8]]},20,{"position":[[1115,8]]},23,{"position":[[409,8]]},59,{"position":[[112,7]]},62,{"position":[[558,7]]},65,{"position":[[715,7]]},68,{"position":[[2896,7]]},71,{"position":[[1503,7]]}]],["basic",[],[],[5,{"position":[[2327,5]]}]],["constrain",[],[],[5,{"position":[[2333,11]]}]],["10",[],[],[5,{"position":[[2345,2],[2484,3],[3385,4]]},8,{"position":[[1167,2]]}]],["scipy.optim",[],[],[5,{"position":[[2378,14]]},59,{"position":[[170,14]]}]],["rosen",[],[],[5,{"position":[[2400,5]]},59,{"position":[[192,5]]}]],["minimize(rosen",[],[],[5,{"position":[[2450,15]]},59,{"position":[[211,15]]}]],["2",[],[],[5,{"position":[[2476,2],[2479,3],[2643,1],[2646,1],[2652,1],[2659,1],[2662,1],[2668,1],[3051,1]]},8,{"position":[[2572,2]]},59,{"position":[[237,2],[240,3],[246,2],[249,4]]}]],["sum(x",[],[],[5,{"position":[[2513,6]]},8,{"position":[[2566,5]]},59,{"position":[[279,6]]}]],["messag",[30,{"position":[[0,7]]}],[],[5,{"position":[[2531,8]]}]],["termin",[],[],[5,{"position":[[2553,10]]},32,{"position":[[36,12]]}]],["successfulli",[],[],[5,{"position":[[2564,13]]},29,{"position":[[36,13]]}]],["success",[27,{"position":[[0,7]]}],[],[5,{"position":[[2578,8]]}]],["0.0",[],[],[5,{"position":[[2597,3]]}]],["nfev",[39,{"position":[[0,4]]}],[],[5,{"position":[[2626,5]]}]],["1036",[],[],[5,{"position":[[2632,4]]}]],["xv",[45,{"position":[[0,2]]}],[],[5,{"position":[[2637,3]]},26,{"position":[[114,2]]},50,{"position":[[37,2]]}]],["funv",[48,{"position":[[0,4]]}],[],[5,{"position":[[2701,5]]},26,{"position":[[120,4]]}]],["1.174e+04",[],[],[5,{"position":[[2709,9]]}]],["1.535e+04",[],[],[5,{"position":[[2719,9]]}]],["0.000e+00",[],[],[5,{"position":[[2732,9],[2742,10]]}]],["elabor",[],[],[5,{"position":[[2760,9]]}]],["three",[],[],[5,{"position":[[2815,5]]}]],["def",[],[],[5,{"position":[[2902,3],[3104,3]]},8,{"position":[[2533,3]]}]],["demand(x",[],[],[5,{"position":[[2906,10]]}]],["n_rose",[],[],[5,{"position":[[2920,8],[3092,7],[3125,8],[3190,7],[3211,7]]}]],["price",[],[],[5,{"position":[[2929,6],[3000,6],[3053,5],[3134,6],[3220,5],[3362,5]]}]],["advertising_cost",[],[],[5,{"position":[[2936,17],[3064,17],[3141,17],[3247,17]]}]],["ground",[],[],[5,{"position":[[2962,6]]}]],["truth",[],[],[5,{"position":[[2969,5]]}]],["demand",[],[],[5,{"position":[[2982,6],[3037,6]]}]],["fall",[],[],[5,{"position":[[2989,5]]}]],["grow",[],[],[5,{"position":[[3011,5]]}]],["advertis",[],[],[5,{"position":[[3024,9],[3401,11]]}]],["20",[],[],[5,{"position":[[3046,2],[3390,3]]}]],["objective(x",[],[],[5,{"position":[[3108,13]]}]],["production_cost",[],[],[5,{"position":[[3166,16],[3228,16]]}]],["1.5",[],[],[5,{"position":[[3185,3]]}]],["profit",[],[],[5,{"position":[[3201,7],[3276,7]]}]],["0",[],[],[5,{"position":[[3302,3]]},14,{"position":[[820,1]]}]],["100",[],[],[5,{"position":[[3306,5],[3394,5]]}]],["zero",[],[],[5,{"position":[[3318,4]]}]],["rose",[],[],[5,{"position":[[3334,5],[3372,4]]}]],["per",[],[],[5,{"position":[[3340,3],[3368,3]]},8,{"position":[[1120,3]]}]],["day",[],[],[5,{"position":[[3344,3]]}]],["5",[],[],[5,{"position":[[3351,4]]},8,{"position":[[2631,2],[2634,3],[2640,2],[2643,4],[2753,2],[2756,3],[2762,2],[2765,4]]}]],["9",[],[],[5,{"position":[[3356,4]]}]],["sold",[],[],[5,{"position":[[3377,4]]}]],["budget",[],[],[5,{"position":[[3413,6]]}]],["minimize(fun=object",[],[],[5,{"position":[[3469,23]]}]],["bounds=bound",[],[],[5,{"position":[[3493,14]]}]],["constraints=demand",[],[],[5,{"position":[[3508,19]]}]],["refer",[],[],[5,{"position":[[3528,10]]}]],["endr",[],[],[5,{"position":[[3545,7]]}]],["s.c",[],[],[5,{"position":[[3553,5]]}]],["sandrock",[],[],[5,{"position":[[3559,9]]}]],["c",[],[],[5,{"position":[[3569,2]]}]],["fock",[],[],[5,{"position":[[3574,6]]}]],["w.w",[],[],[5,{"position":[[3581,4]]}]],["simplici",[],[],[5,{"position":[[3588,10]]}]],["lipschitz",[],[],[5,{"position":[[3622,9]]}]],["optimis",[],[],[5,{"position":[[3632,13]]}]],["j",[],[],[5,{"position":[[3646,1],[3847,1]]}]],["glob",[],[],[5,{"position":[[3648,4]]}]],["72",[],[],[5,{"position":[[3659,3]]}]],["181–217",[],[],[5,{"position":[[3663,7]]}]],["2018",[],[],[5,{"position":[[3671,7]]}]],["duan",[],[],[5,{"position":[[3721,5]]}]],["q.i",[],[],[5,{"position":[[3727,5]]}]],["gupta",[],[],[5,{"position":[[3733,6]]}]],["v.k",[],[],[5,{"position":[[3740,4]]}]],["sorooshian",[],[],[5,{"position":[[3747,11]]}]],["s",[],[],[5,{"position":[[3759,2]]}]],["approach",[],[],[5,{"position":[[3789,8]]}]],["effect",[],[],[5,{"position":[[3802,9]]},68,{"position":[[152,6],[252,6],[677,6]]}]],["effici",[],[],[5,{"position":[[3816,9]]}]],["theori",[],[],[5,{"position":[[3855,6]]}]],["appl",[],[],[5,{"position":[[3862,4]]}]],["76",[],[],[5,{"position":[[3867,3]]}]],["501–521",[],[],[5,{"position":[[3871,7]]}]],["1993",[],[],[5,{"position":[[3879,7]]}]],["koziel",[],[],[5,{"position":[[3922,7]]}]],["slawomir",[],[],[5,{"position":[[3930,9]]}]],["leifur",[],[],[5,{"position":[[3944,6]]}]],["leifsson",[],[],[5,{"position":[[3951,9]]}]],["new",[],[],[5,{"position":[[4004,3]]},17,{"position":[[116,3]]}]],["york",[],[],[5,{"position":[[4008,5]]}]],["springer",[],[],[5,{"position":[[4014,9]]}]],["2013",[],[],[5,{"position":[[4024,5]]}]],["doi.org/10.1007/978",[],[],[5,{"position":[[4037,19]]}]],["4614",[],[],[5,{"position":[[4059,4]]}]],["7551",[],[],[5,{"position":[[4064,4]]}]],["4",[],[],[5,{"position":[[4069,1]]}]],["head",[],[],[5,{"position":[[4072,5]]}]],["t",[],[],[5,{"position":[[4078,3]]}]],["kumar",[],[],[5,{"position":[[4082,6]]}]],["m",[],[],[5,{"position":[[4089,3]]}]],["nahrstaedt",[],[],[5,{"position":[[4093,11]]}]],["h",[],[],[5,{"position":[[4105,3]]}]],["loupp",[],[],[5,{"position":[[4109,7]]}]],["g",[],[],[5,{"position":[[4117,3]]}]],["shcherbatyi",[],[],[5,{"position":[[4123,12]]}]],["2021",[],[],[5,{"position":[[4139,7]]}]],["optimize/scikit",[],[],[5,{"position":[[4154,15]]}]],["v0.9.0",[],[],[5,{"position":[[4179,9]]}]],["zenodo",[],[],[5,{"position":[[4189,7]]}]],["doi.org/10.5281/zenodo.5565057",[],[],[5,{"position":[[4204,30]]}]],["unspecifi",[],[],[8,{"position":[[284,12]]},65,{"position":[[476,12]]}]],["iter",[],[],[8,{"position":[[323,11],[910,10],[1124,10],[1180,10],[2080,10]]},20,{"position":[[69,10],[187,11],[375,10],[766,10],[947,10],[1175,11]]},44,{"position":[[10,10]]},56,{"position":[[675,10]]}]],["fashion",[],[],[8,{"position":[[350,7]]}]],["name",[],[],[8,{"position":[[376,5],[1840,6]]},56,{"position":[[460,5]]},68,{"position":[[2032,5]]},71,{"position":[[654,5]]}]],["respect",[],[],[8,{"position":[[382,13]]}]],["decis",[],[],[8,{"position":[[633,8]]}]],["max_it",[],[],[8,{"position":[[867,8]]},20,{"position":[[388,8],[719,8]]},56,{"position":[[615,8]]}]],["maximum",[],[],[8,{"position":[[892,7]]},20,{"position":[[357,7],[748,7]]},56,{"position":[[657,7]]}]],["allow",[],[],[8,{"position":[[921,8]]},17,{"position":[[149,6]]}]],["befor",[],[],[8,{"position":[[1009,6],[1211,6]]}]],["first",[],[],[8,{"position":[[1016,5]]},17,{"position":[[600,5]]}]],["fit",[],[],[8,{"position":[[1022,7],[1848,5]]},56,{"position":[[385,5]]},68,{"position":[[1819,6]]}]],["candid",[],[],[8,{"position":[[1090,9]]},11,{"position":[[45,10]]},14,{"position":[[8,9],[183,9],[384,9],[1091,9],[1122,10],[1221,10],[1277,10]]},17,{"position":[[120,9],[531,10],[670,10],[730,9]]},20,{"position":[[209,10],[904,10]]}]],["n_iter_no_chang",[],[],[8,{"position":[[1135,16]]}]],["stop",[],[],[8,{"position":[[1218,9],[1502,5],[2108,5]]},20,{"position":[[419,8]]}]],["recent",[],[],[8,{"position":[[1269,8]]},17,{"position":[[524,6]]}]],["next",[],[],[8,{"position":[[1316,4]]},14,{"position":[[36,4]]}]],["best",[],[],[8,{"position":[[1321,4]]},11,{"position":[[40,4]]},20,{"position":[[1260,4]]},23,{"position":[[61,4],[319,4],[435,4]]},68,{"position":[[884,4],[2387,4]]},71,{"position":[[354,4]]}]],["predict",[],[],[8,{"position":[[1332,11],[1859,9]]},11,{"position":[[277,9]]},14,{"position":[[508,9]]},56,{"position":[[396,9]]},68,{"position":[[401,11]]}]],["small",[],[],[8,{"position":[[1355,5]]}]],["such",[],[],[8,{"position":[[1387,4]]}]],["et",[],[],[8,{"position":[[1396,4],[1585,5],[1726,4]]},11,{"position":[[364,4]]}]],["fix",[],[],[8,{"position":[[1409,5]]},68,{"position":[[627,5]]}]],["tol",[],[],[8,{"position":[[1423,3]]}]],["float32_precis",[],[],[8,{"position":[[1444,17]]}]],["toler",[],[],[8,{"position":[[1462,9]]}]],["converg",[],[],[8,{"position":[[1476,12]]},59,{"position":[[44,12]]},62,{"position":[[20,11],[219,11]]},65,{"position":[[289,11]]}]],["found",[],[],[8,{"position":[[1513,5]]},23,{"position":[[76,5]]},65,{"position":[[540,5]]},68,{"position":[[889,5],[1389,5],[2392,5]]},71,{"position":[[359,5]]}]],["threshold",[],[],[8,{"position":[[1555,10]]}]],["gp",[],[],[8,{"position":[[1578,6],[1701,4]]},11,{"position":[[356,4]]}]],["gb",[],[],[8,{"position":[[1591,5],[1749,4]]},11,{"position":[[372,4]]}]],["regressor",[],[],[8,{"position":[[1618,10],[1805,9]]}]],["default='gp",[],[],[8,{"position":[[1629,12]]}]],["gradient",[],[],[8,{"position":[[1754,9]]}]],["boost",[],[],[8,{"position":[[1764,10]]}]],["api",[],[],[8,{"position":[[1835,4]]}]],["y0",[],[],[8,{"position":[[1878,2]]}]],["tuple[float",[],[],[8,{"position":[[1892,13]]}]],["value(",[],[],[8,{"position":[[1923,8]]},17,{"position":[[297,8]]},68,{"position":[[2331,8]]}]],["correspond",[],[],[8,{"position":[[1958,13]]},17,{"position":[[387,13],[501,10]]}]],["callback",[],[],[8,{"position":[[1981,8],[2036,8],[2121,8]]}]],["optimizeresult",[24,{"position":[[0,14]]}],[],[8,{"position":[[2001,16]]},20,{"position":[[1047,15],[1063,14]]},56,{"position":[[1359,14]]},62,{"position":[[138,14],[167,15]]},65,{"position":[[208,14],[237,15]]},68,{"position":[[1430,14]]},71,{"position":[[403,14]]}]],["call",[],[],[8,{"position":[[2062,6]]}]],["rais",[],[],[8,{"position":[[2146,6]]}]],["stopiter",[],[],[8,{"position":[[2154,13]]}]],["n_job",[],[],[8,{"position":[[2170,6]]},14,{"position":[[1172,6]]},56,{"position":[[1050,7]]}]],["run",[18,{"position":[[0,3]]}],[],[8,{"position":[[2238,3]]},20,{"position":[[1128,3]]}]],["parallel",[],[],[8,{"position":[[2245,9]]},14,{"position":[[1149,8]]}]],["applic",[],[],[8,{"position":[[2260,9]]}]],["objective_func(x",[],[],[8,{"position":[[2537,18],[2812,18]]}]],["optimizer(fun=objective_func",[],[],[8,{"position":[[2591,29]]}]],["optimizer.run",[],[],[8,{"position":[[2661,15]]},23,{"position":[[454,15]]}]],["optimizer(fun=non",[],[],[8,{"position":[[2723,19]]}]],["suggested_x",[],[],[8,{"position":[[2774,11],[2840,12],[2875,12]]}]],["optimizer.ask",[],[],[8,{"position":[[2788,15]]}]],["optimizer.tell(i",[],[],[8,{"position":[[2857,17]]}]],["acq_func",[9,{"position":[[0,9]]}],[],[14,{"position":[[286,8],[875,8]]}]],["sambo.optimizer.acq_func",[],[10,{"position":[[0,25]]}],[]],["acquisit",[],[],[11,{"position":[[0,11]]},14,{"position":[[106,11],[332,11],[668,11]]}]],["select",[],[],[11,{"position":[[26,9]]},14,{"position":[[371,9]]}]],["sampl",[],[],[11,{"position":[[65,7]]},20,{"position":[[672,8]]},68,{"position":[[562,7],[1226,7],[1349,7],[1729,7]]},71,{"position":[[168,7],[245,6],[309,7]]}]],["current",[],[],[11,{"position":[[73,9]]},14,{"position":[[75,7]]}]],["defin",[],[],[11,{"position":[[83,7]]}]],["key",[],[],[11,{"position":[[91,5]]},56,{"position":[[475,4]]}]],["ucb",[],[],[11,{"position":[[97,5]]}]],["upper",[],[],[11,{"position":[[107,5]]},14,{"position":[[417,5]]}]],["confid",[],[],[11,{"position":[[113,10]]},14,{"position":[[423,10],[838,10]]}]],["mean",[],[],[11,{"position":[[132,4]]},14,{"position":[[447,4],[472,4]]},68,{"position":[[1109,5]]}]],["kappa",[],[],[11,{"position":[[139,5],[223,5]]},14,{"position":[[454,5],[782,5]]},20,{"position":[[682,5]]}]],["std",[],[],[11,{"position":[[146,3]]},14,{"position":[[461,3],[482,3]]}]],["blank",[],[],[11,{"position":[[163,5]]}]],["line",[],[],[11,{"position":[[169,4]]}]],["here",[],[],[11,{"position":[[174,5]]}]],["bug",[],[],[11,{"position":[[180,3]]}]],["pdoc",[],[],[11,{"position":[[187,5]]}]],["estimator'",[],[],[11,{"position":[[264,11]]}]],["return_std",[],[],[11,{"position":[[308,11]]}]],["behavior",[],[],[11,{"position":[[320,9]]}]],["sambo.optimizer.ask",[],[13,{"position":[[0,19]]}],[]],["propos",[],[],[14,{"position":[[0,7],[206,8],[1082,8],[1137,8]]},17,{"position":[[232,10],[542,8]]},20,{"position":[[199,9],[918,7]]}]],["model(",[],[],[14,{"position":[[93,8]]},17,{"position":[[195,8]]},53,{"position":[[17,8]]}]],["set",[],[],[14,{"position":[[251,3]]},47,{"position":[[18,4]]}]],["dure",[],[],[14,{"position":[[255,6]]},20,{"position":[[834,6],[1003,6]]},62,{"position":[[78,6]]},68,{"position":[[838,6],[1254,6]]},71,{"position":[[51,6]]}]],["acq_funcs['ucb",[],[],[14,{"position":[[315,16],[565,16]]}]],["guid",[],[],[14,{"position":[[361,5]]},17,{"position":[[215,5]]}]],["i.",[],[],[14,{"position":[[440,5]]}]],["tip",[],[],[14,{"position":[[529,3]]}]],["source][_gh",[],[],[14,{"position":[[542,13]]}]],["implemet",[],[],[14,{"position":[[585,11]]}]],["extens",[],[],[14,{"position":[[631,9]]}]],["accommod",[],[],[14,{"position":[[644,11]]}]],["altern",[],[],[14,{"position":[[656,11]]},71,{"position":[[1259,14]]}]],["_gh",[],[],[14,{"position":[[691,7]]}]],["github.com/search?q=repo%3asambo",[],[],[14,{"position":[[706,32]]}]],["optimization%2fsambo%20acq_funcs&type=cod",[],[],[14,{"position":[[739,42]]}]],["list[float",[],[],[14,{"position":[[799,12]]},17,{"position":[[272,11],[346,12]]}]],["upper/low",[],[],[14,{"position":[[826,11]]}]],["balanc",[],[],[14,{"position":[[891,8]]}]],["explor",[],[],[14,{"position":[[900,11]]},20,{"position":[[633,11]]}]],["vs",[],[],[14,{"position":[[912,2]]}]],["exploit",[],[],[14,{"position":[[915,13]]},20,{"position":[[649,12]]}]],["n_cadid",[],[],[14,{"position":[[985,11]]}]],["shape",[],[],[14,{"position":[[1035,5]]},23,{"position":[[336,5]]}]],["n_bound",[],[],[14,{"position":[[1057,9]]},23,{"position":[[347,9]]}]],["optimizer.ask(n_candidates=2",[],[],[14,{"position":[[1234,29]]}]],["kappa=2",[],[],[14,{"position":[[1264,8]]}]],["1.1",[],[],[14,{"position":[[1295,4]]}]],["0.2",[],[],[14,{"position":[[1301,5]]}]],["0.8",[],[],[14,{"position":[[1309,4]]}]],["0.1",[],[],[14,{"position":[[1314,3]]}]],["sambo.optimizer.tel",[],[16,{"position":[[0,20]]}],[]],["increment",[],[],[17,{"position":[[8,11]]}]],["feedback",[],[],[17,{"position":[[20,8]]}]],["report",[],[],[17,{"position":[[49,9]]}]],["back",[],[],[17,{"position":[[59,4]]}]],["suggest",[],[],[17,{"position":[[103,9]]}]],["refin",[],[],[17,{"position":[[173,6]]}]],["underli",[],[],[17,{"position":[[184,10]]}]],["subsequ",[],[],[17,{"position":[[221,10]]}]],["observ",[],[],[17,{"position":[[288,8],[408,8]]},38,{"position":[[44,8]]}]],["input",[],[],[17,{"position":[[372,5]]}]],["omit",[],[],[17,{"position":[[451,8]]}]],["fifo",[],[],[17,{"position":[[570,7]]}]],["way",[],[],[17,{"position":[[641,3]]}]],["optimizer.ask(n_candidates=3",[],[],[17,{"position":[[683,29]]}]],["irl",[],[],[17,{"position":[[750,3]]}]],["objective_valu",[],[],[17,{"position":[[787,16]]}]],["1.7",[],[],[17,{"position":[[806,5]]}]],["3",[],[],[17,{"position":[[812,2]]}]],["8",[],[],[17,{"position":[[815,3]]},68,{"position":[[2689,1]]},71,{"position":[[1028,1]]}]],["optimizer.tell(y=objective_valu",[],[],[17,{"position":[[823,34]]}]],["x=candid",[],[],[17,{"position":[[858,13]]}]],["sambo.optimizer.run",[],[19,{"position":[[0,19]]}],[]],["execut",[],[],[20,{"position":[[0,7]]}]],["perform",[],[],[20,{"position":[[151,8],[780,8]]},44,{"position":[[21,9]]}]],["updat",[],[],[20,{"position":[[281,8]]}]],["state",[],[],[20,{"position":[[304,5]]}]],["continu",[],[],[20,{"position":[[337,9]]},56,{"position":[[543,10]]}]],["until",[],[],[20,{"position":[[347,5]]}]],["reach",[],[],[20,{"position":[[402,7]]}]],["criteria",[],[],[20,{"position":[[428,8]]}]],["met",[],[],[20,{"position":[[441,4]]}]],["encapsul",[],[],[20,{"position":[[458,12]]}]],["entir",[],[],[20,{"position":[[475,6]]}]],["workflow",[],[],[20,{"position":[[495,9]]}]],["conveni",[],[],[20,{"position":[[515,10]]}]],["don't",[],[],[20,{"position":[[542,5]]}]],["fine",[],[],[20,{"position":[[553,4]]}]],["grain",[],[],[20,{"position":[[558,7]]}]],["control",[],[],[20,{"position":[[566,7]]}]],["over",[],[],[20,{"position":[[574,4]]}]],["individu",[],[],[20,{"position":[[579,10]]},68,{"position":[[59,10]]}]],["cycl",[],[],[20,{"position":[[618,6]]}]],["between",[],[],[20,{"position":[[625,7]]},65,{"position":[[73,7]]}]],["appropri",[],[],[20,{"position":[[688,14]]}]],["optimizer.run(max_iter=30",[],[],[20,{"position":[[1200,26]]}]],["print(result.x",[],[],[20,{"position":[[1231,15]]}]],["result.fun",[],[],[20,{"position":[[1247,11]]}]],["top_k",[21,{"position":[[0,5]]}],[],[]],["sambo.optimizer.top_k",[],[22,{"position":[[0,21]]}],[]],["retriev",[],[],[23,{"position":[[42,8],[184,9],[422,8]]}]],["top",[],[],[23,{"position":[[55,3],[167,3]]}]],["k",[],[],[23,{"position":[[59,1],[134,1],[198,1],[343,3]]}]],["far",[],[],[23,{"position":[[113,4]]},68,{"position":[[1371,3]]}]],["exce",[],[],[23,{"position":[[200,7]]}]],["avail",[],[],[23,{"position":[[247,9]]}]],["list",[],[],[23,{"position":[[311,4]]},56,{"position":[[484,5]]},68,{"position":[[2040,4],[2145,4],[2171,4],[2302,4]]},71,{"position":[[662,4],[767,4],[793,4]]}]],["best_x",[],[],[23,{"position":[[474,7]]}]],["best_i",[],[],[23,{"position":[[482,6]]}]],["optimizer.top_k(1",[],[],[23,{"position":[[491,18]]}]],["sambo.optimizeresult",[],[25,{"position":[[0,20]]}],[]],["field",[],[],[26,{"position":[[26,6]]}]],["inherit",[],[],[26,{"position":[[37,9]]}]],["scipy.optimize.optimizeresult",[],[],[26,{"position":[[53,29]]}]],["attribut",[],[],[26,{"position":[[101,11]]},56,{"position":[[1329,10]]}]],["sambo.optimizeresult.success",[],[28,{"position":[[0,28]]}],[]],["whether",[],[],[29,{"position":[[0,7]]}]],["exit",[],[],[29,{"position":[[29,6]]}]],["sambo.optimizeresult.messag",[],[31,{"position":[[0,28]]}],[]],["detail",[],[],[32,{"position":[[5,8]]}]],["caus",[],[],[32,{"position":[[14,5]]}]],["sambo.optimizeresult.x",[],[34,{"position":[[0,22]]}],[]],["shape=(n_featur",[],[],[35,{"position":[[35,19]]}]],["sambo.optimizeresult.fun",[],[37,{"position":[[0,24]]}],[]],["aka",[],[],[38,{"position":[[36,3]]}]],["minimum",[],[],[38,{"position":[[53,8]]},62,{"position":[[351,7]]},65,{"position":[[421,7],[489,7],[518,7]]},68,{"position":[[895,7]]}]],["sambo.optimizeresult.nfev",[],[40,{"position":[[0,25]]}],[]],["nit",[42,{"position":[[0,3]]}],[],[]],["sambo.optimizeresult.nit",[],[43,{"position":[[0,24]]}],[]],["sambo.optimizeresult.xv",[],[46,{"position":[[0,23]]}],[]],["tri",[],[],[47,{"position":[[38,6]]},56,{"position":[[514,3]]}]],["shape=(nfev",[],[],[47,{"position":[[59,12]]}]],["n_featur",[],[],[47,{"position":[[72,11]]}]],["sambo.optimizeresult.funv",[],[49,{"position":[[0,25]]}],[]],["sambo.optimizeresult.model",[],[52,{"position":[[0,26]]}],[]],["sambo.sambosearchcv",[],[55,{"position":[[0,19]]}],[]],["search",[],[],[56,{"position":[[22,6]]},68,{"position":[[577,6],[1312,6],[2273,6]]},71,{"position":[[895,6]]}]],["cross",[],[],[56,{"position":[[34,5]]}]],["valid",[],[],[56,{"position":[[40,10]]}]],["hyperparamet",[],[],[56,{"position":[[81,15]]}]],["pipelin",[],[],[56,{"position":[[127,9],[325,8]]}]],["those",[],[],[56,{"position":[[142,5]]}]],["hopefulli",[],[],[56,{"position":[[213,9]]}]],["larg",[],[],[56,{"position":[[240,5]]}]],["space",[],[],[56,{"position":[[256,6]]},68,{"position":[[584,6],[1319,5],[2280,6]]},71,{"position":[[902,6]]}]],["baseestim",[],[],[56,{"position":[[293,13]]}]],["param_grid",[],[],[56,{"position":[[415,10]]}]],["dictionari",[],[],[56,{"position":[[433,10]]}]],["str",[],[],[56,{"position":[[466,5]]},68,{"position":[[2048,4],[2704,3]]},71,{"position":[[670,4],[1109,3]]}]],["choic",[],[],[56,{"position":[[503,7]]}]],["both",[],[],[56,{"position":[[538,4]]}]],["rang",[],[],[56,{"position":[[564,6]]}]],["discrete/str",[],[],[56,{"position":[[575,15]]}]],["default=100",[],[],[56,{"position":[[641,11]]}]],["sceua",[],[],[56,{"position":[[726,8]]}]],["smbo",[],[],[56,{"position":[[735,8]]}]],["default='smbo",[],[],[56,{"position":[[754,14]]}]],["comparison",[],[],[56,{"position":[[837,11]]}]],["np.random.randomgener",[],[],[56,{"position":[[887,25]]}]],["none",[],[],[56,{"position":[[916,5]]}]],["basesearchcv",[],[],[56,{"position":[[1023,12]]}]],["score",[],[],[56,{"position":[[1038,8]]}]],["refit",[],[],[56,{"position":[[1061,6]]}]],["cv",[],[],[56,{"position":[[1069,3]]}]],["verbos",[],[],[56,{"position":[[1076,8]]}]],["pre_dispatch",[],[],[56,{"position":[[1088,13]]}]],["error_scor",[],[],[56,{"position":[[1105,12]]}]],["return_train_scor",[],[],[56,{"position":[[1121,19]]}]],["document",[],[],[56,{"position":[[1165,13]]}]],["opt_result_",[],[],[56,{"position":[[1345,11]]}]],["learn.org/stable/modules/grid_search.html",[],[],[56,{"position":[[1444,41]]}]],["plot",[57,{"position":[[0,4]]}],[],[59,{"position":[[35,8]]},62,{"position":[[0,4],[210,4]]},65,{"position":[[0,4],[280,4]]},68,{"position":[[0,4],[39,5],[137,5],[218,5],[333,4],[962,4],[1119,5],[1535,5],[2025,6],[2219,5],[2367,6],[2462,4],[2541,6],[2763,6],[2889,6]]},71,{"position":[[97,4],[121,5],[195,5],[232,5],[841,5],[971,6],[1315,4],[1345,4]]}]],["sambo.plot",[],[58,{"position":[[0,10]]}],[]],["modul",[],[],[59,{"position":[[4,6]]}]],["regret",[],[],[59,{"position":[[57,7]]},65,{"position":[[31,8],[48,6],[117,9]]}]],["partial",[],[],[59,{"position":[[65,7]]},68,{"position":[[20,7],[314,7],[473,7],[943,7],[1649,7],[2866,7]]}]],["depend",[],[],[59,{"position":[[73,11]]},68,{"position":[[28,10],[322,10],[481,10],[951,10],[1657,10],[2874,10]]}]],["matplotlib.pyplot",[],[],[59,{"position":[[136,17]]}]],["plt",[],[],[59,{"position":[[157,3]]}]],["plot_convergence(result",[],[],[59,{"position":[[290,24]]}]],["plot_regret(result",[],[],[59,{"position":[[319,19]]}]],["plot_objective(result",[],[],[59,{"position":[[343,22]]}]],["plot_evaluations(result",[],[],[59,{"position":[[370,24]]}]],["plt.show",[],[],[59,{"position":[[399,10]]}]],["plot_converg",[60,{"position":[[0,16]]}],[],[]],["sambo.plot.plot_converg",[],[61,{"position":[[0,27]]}],[]],["sever",[],[],[62,{"position":[[12,7]]},65,{"position":[[12,7]]}]],["trace",[],[],[62,{"position":[[32,7],[231,6]]},65,{"position":[[40,7],[301,6]]}]],["show",[],[],[62,{"position":[[40,7]]},68,{"position":[[50,4],[143,4],[243,4],[338,5],[720,5],[1125,4]]},71,{"position":[[147,4],[344,5],[1338,4]]}]],["error",[],[],[62,{"position":[[55,5]]}]],["evolv",[],[],[62,{"position":[[70,7]]}]],["tuple[str",[],[],[62,{"position":[[156,10]]},65,{"position":[[226,10]]}]],["result(",[],[],[62,{"position":[[187,9]]},65,{"position":[[257,9]]}]],["format",[],[],[62,{"position":[[247,7]]},65,{"position":[[317,7]]}]],["string",[],[],[62,{"position":[[259,6]]},65,{"position":[[329,6]]}]],["legend",[],[],[62,{"position":[[281,6]]},65,{"position":[[351,6]]}]],["label",[],[],[62,{"position":[[288,5]]},65,{"position":[[358,5]]},68,{"position":[[2066,6]]},71,{"position":[[688,6]]}]],["true_minimum",[],[],[62,{"position":[[311,12]]},65,{"position":[[381,12]]},68,{"position":[[908,12],[2287,12]]}]],["known",[],[],[62,{"position":[[396,6]]},65,{"position":[[466,6]]}]],["xscale",[],[],[62,{"position":[[403,7]]},65,{"position":[[560,7]]}]],["yscale",[],[],[62,{"position":[[411,6]]},65,{"position":[[568,6]]}]],["linear",[],[],[62,{"position":[[420,10]]},65,{"position":[[577,10]]},68,{"position":[[1946,10]]}]],["log",[],[],[62,{"position":[[431,7]]},65,{"position":[[588,7]]},68,{"position":[[1957,7]]}]],["default='linear",[],[],[62,{"position":[[449,16]]},65,{"position":[[606,16]]},68,{"position":[[1965,16]]}]],["scale",[],[],[62,{"position":[[470,6]]},65,{"position":[[627,6]]},68,{"position":[[1982,5]]}]],["ax",[],[],[62,{"position":[[485,5]]},65,{"position":[[642,5]]},71,{"position":[[1308,3]]}]],["fig",[],[],[62,{"position":[[504,3]]},65,{"position":[[661,3]]},68,{"position":[[2820,3]]},71,{"position":[[1447,3]]}]],["matplotlib.figure.figur",[],[],[62,{"position":[[510,24]]},65,{"position":[[667,24]]},68,{"position":[[2826,24]]},71,{"position":[[1453,24]]}]],["matplotlib",[],[],[62,{"position":[[539,10]]},65,{"position":[[696,10]]}]],["figur",[],[],[62,{"position":[[550,7]]},65,{"position":[[707,7]]},71,{"position":[[1195,6],[1230,6],[1274,6]]}]],["imag",[],[],[62,{"position":[[572,5]]},65,{"position":[[729,5]]},68,{"position":[[2910,5]]},71,{"position":[[1517,5]]}]],["convergence.svg",[],[],[62,{"position":[[578,16]]}]],["plot_regret",[63,{"position":[[0,11]]}],[],[]],["sambo.plot.plot_regret",[],[64,{"position":[[0,22]]}],[]],["cumul",[],[],[65,{"position":[[20,10]]}]],["differ",[],[],[65,{"position":[[62,10]]}]],["achiev",[],[],[65,{"position":[[81,8]]}]],["en.wikipedia.org/wiki/regret_(decision_theori",[],[],[65,{"position":[[134,46]]}]],["regret.svg",[],[],[65,{"position":[[735,11]]}]],["plot_object",[66,{"position":[[0,14]]}],[],[]],["sambo.plot.plot_object",[],[67,{"position":[[0,25]]}],[]],["2d",[],[],[68,{"position":[[7,2],[2853,2]]},71,{"position":[[87,2],[1480,2]]}]],["matrix",[],[],[68,{"position":[[10,6],[2856,6]]},71,{"position":[[90,6],[1483,6]]}]],["influenc",[],[],[68,{"position":[[70,9],[380,9],[439,9],[730,9]]}]],["diagon",[],[],[68,{"position":[[128,8],[234,8]]},71,{"position":[[112,8],[211,8],[510,9]]}]],["vari",[],[],[68,{"position":[[290,7],[687,7]]}]],["averag",[],[],[68,{"position":[[419,10],[509,9],[660,8],[1748,9]]}]],["out",[],[],[68,{"position":[[430,4],[669,3]]},71,{"position":[[1202,3],[1217,3],[1281,3]]}]],["calcul",[],[],[68,{"position":[[495,10]]}]],["keep",[],[],[68,{"position":[[597,7]]}]],["regular",[],[],[68,{"position":[[636,7]]}]],["interv",[],[],[68,{"position":[[644,10]]}]],["black",[],[],[68,{"position":[[797,5]]}]],["indic",[],[],[68,{"position":[[808,8],[870,9],[2189,7]]},71,{"position":[[275,10],[811,7]]}]],["red",[],[],[68,{"position":[[861,3],[2347,3]]},71,{"position":[[335,3]]}]],["star",[],[],[68,{"position":[[865,4]]},71,{"position":[[339,4]]}]],["turn",[],[],[68,{"position":[[1021,4]]}]],["therefor",[],[],[68,{"position":[[1167,9]]}]],["quit",[],[],[68,{"position":[[1180,5]]}]],["imprecis",[],[],[68,{"position":[[1186,10]]}]],["especi",[],[],[68,{"position":[[1197,10],[1283,10]]}]],["rel",[],[],[68,{"position":[[1211,10]]}]],["collect",[],[],[68,{"position":[[1244,9]]}]],["region",[],[],[68,{"position":[[1297,7],[1363,7]]}]],["spars",[],[],[68,{"position":[[1340,8]]}]],["away",[],[],[68,{"position":[[1375,4]]}]],["level",[],[],[68,{"position":[[1470,6],[1505,6]]}]],["default=10",[],[],[68,{"position":[[1484,10]]},71,{"position":[[455,10]]}]],["draw",[],[],[68,{"position":[[1515,4]]}]],["contour",[],[],[68,{"position":[[1527,7],[2017,7],[2533,7],[2755,7]]}]],["directli",[],[],[68,{"position":[[1548,8],[2777,8]]}]],["plt.contourf",[],[],[68,{"position":[[1561,14],[2790,14]]}]],["resolut",[],[],[68,{"position":[[1578,10]]}]],["default=16",[],[],[68,{"position":[[1596,10]]}]],["along",[],[],[68,{"position":[[1668,5]]}]],["n_sampl",[],[],[68,{"position":[[1690,9]]}]],["default=250",[],[],[68,{"position":[[1707,11]]}]],["n_point",[],[],[68,{"position":[[1793,8]]}]],["last",[],[],[68,{"position":[[1814,4]]}]],["size",[],[],[68,{"position":[[1871,4]]},71,{"position":[[1037,4]]}]],["default=2",[],[],[68,{"position":[[1885,9]]},71,{"position":[[1051,9]]}]],["height",[],[],[68,{"position":[[1895,6]]},71,{"position":[[1061,6]]}]],["inch",[],[],[68,{"position":[[1906,7]]},71,{"position":[[1072,7]]}]],["subplot/facet",[],[],[68,{"position":[[1922,14]]},71,{"position":[[1088,14]]}]],["zscale",[],[],[68,{"position":[[1937,6]]}]],["z",[],[],[68,{"position":[[2003,1]]}]],["axi",[],[],[68,{"position":[[2005,4]]}]],["default=non",[],[],[68,{"position":[[2053,12],[2158,12],[2318,12]]},71,{"position":[[675,12],[780,12]]}]],["x1",[],[],[68,{"position":[[2121,5]]},71,{"position":[[743,5]]}]],["plot_dim",[],[],[68,{"position":[[2133,9]]},71,{"position":[[755,9]]}]],["non",[],[],[68,{"position":[[2242,3]]},71,{"position":[[864,3]]}]],["constant",[],[],[68,{"position":[[2246,8]]},71,{"position":[[868,8]]}]],["plot_max_point",[],[],[68,{"position":[[2428,16]]}]],["default=200",[],[],[68,{"position":[[2450,11]]}]],["randomli",[],[],[68,{"position":[[2485,8]]}]],["chosen",[],[],[68,{"position":[[2494,6]]}]],["overlay",[],[],[68,{"position":[[2518,10]]}]],["jitter",[],[],[68,{"position":[[2548,6],[2586,6]]},71,{"position":[[909,6],[946,6]]}]],["default=.02",[],[],[68,{"position":[[2564,11]]},71,{"position":[[925,11]]}]],["amount",[],[],[68,{"position":[[2576,6]]}]],["add",[],[],[68,{"position":[[2596,3]]},71,{"position":[[956,3]]}]],["look",[],[],[68,{"position":[[2647,5]]},71,{"position":[[986,5]]}]],["clear",[],[],[68,{"position":[[2653,5]]},71,{"position":[[992,5]]}]],["categori",[],[],[68,{"position":[[2663,10]]},71,{"position":[[1002,10]]}]],["up",[],[],[68,{"position":[[2677,2]]},71,{"position":[[1016,2]]}]],["item",[],[],[68,{"position":[[2691,6]]},71,{"position":[[1030,6]]}]],["cmap",[],[],[68,{"position":[[2698,5]]},71,{"position":[[1103,5]]}]],["colormap",[],[],[68,{"position":[[2711,9]]},71,{"position":[[1116,9]]}]],["default='viridis_r",[],[],[68,{"position":[[2721,19]]}]],["color",[],[],[68,{"position":[[2741,5]]},71,{"position":[[269,5],[1143,5]]}]],["map",[],[],[68,{"position":[[2747,3]]},71,{"position":[[1149,3]]}]],["sub",[],[],[68,{"position":[[2885,3]]}]],["objective.svg",[],[],[68,{"position":[[2916,14]]}]],["plot_evalu",[69,{"position":[[0,16]]}],[],[]],["sambo.plot.plot_evalu",[],[70,{"position":[[0,27]]}],[]],["visual",[],[],[71,{"position":[[0,9]]}]],["creat",[],[],[71,{"position":[[77,7]]}]],["histogram",[],[],[71,{"position":[[131,10],[492,10]]}]],["distribut",[],[],[71,{"position":[[152,12]]}]],["scatter",[],[],[71,{"position":[[224,7],[963,7],[1173,7]]}]],["bin",[],[],[71,{"position":[[443,4],[476,4],[617,4]]}]],["wherea",[],[],[71,{"position":[[560,7]]}]],["equal",[],[],[71,{"position":[[622,5]]}]],["distinct",[],[],[71,{"position":[[637,8]]}]],["ratio",[],[],[71,{"position":[[937,5]]}]],["default='summ",[],[],[71,{"position":[[1126,16]]}]],["todo",[],[],[71,{"position":[[1190,4]]}]],["lay",[],[],[71,{"position":[[1213,3]]}]],["multipl",[],[],[71,{"position":[[1221,8]]}]],["side",[],[],[71,{"position":[[1245,4],[1253,5]]}]],["onto",[],[],[71,{"position":[[1320,5]]}]],["testdocs.test_make_doc_plot",[],[],[71,{"position":[[1400,30]]}]],["subplot",[],[],[71,{"position":[[1493,9]]}]],["evaluations.svg",[],[],[71,{"position":[[1523,16]]}]]],"pipeline":["stemmer"]},[{"ref":"sambo","url":0,"doc":" SAMBO -  Sequential and Model-Based Optimization [in Python] Sambo is a  global optimization framework for finding approximate global optima † of arbitrary high-dimensional objective functions in the  least number of function evaluations . Function evaluations are considered the \"expensive\" resource (it can sometimes take weeks to obtain results!), so it's important to find good-enough solutions in  as few steps as possible (whence _sequential_). The main tools in this Python optimization toolbox are:   function  sambo.minimize() , a near drop-in replacement for [ scipy.optimize.minimize() ][sp_opt_min],   class  Optimizer with an ask-and-tell user interface, supporting arbitrary scikit-learn-like surrogate models, with Bayesian optimization estimators like [gaussian process] and [extra trees], built in,   SamboSearchCV , a much faster drop-in replacement for scikit-learn's [ GridSearchCV ][skl_gridsearchcv] and similar exhaustive machine-learning hyper-parameter tuning methods, but compared to unpredictable stochastic methods, _informed_. The algorithms and methods implemented by or used in this package are:  [simplical homology global optimization] (SHGO), customizing the [implementation from SciPy],  surrogate machine learning model-based optimization,  [shuffled complex evolution] (SCE-UA with improvements). [simplical homology global optimization]: http: doi.org/10.1007/s10898-018-0645-y [implementation from SciPy]: https: docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.shgo.html [shuffled complex evolution]: https: doi.org/10.1007/BF00939380 This open-source project was heavily  inspired by _scikit-optimize_ project, which now seems helplessly defunct. The project is one of the better optimizers around according to [benchmark]. † The contained algorithms seek to _minimize_ your objective  f(x) . If you instead need the _maximum_, simply minimize  -f(x) . 💡 [gaussian process]: https: www.gaussianprocess.org/gpml/chapters/RW.pdf [extra trees]: https: doi.org/10.1007/s10994-006-6226-1 [kernel ridge regression]: https: scikit-learn.org/stable/modules/kernel_ridge.html [sp_opt_min]: https: docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html [skl_gridsearchcv]: https: scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html","name":"sambo","i":0},{"ref":"sambo.minimize","url":0,"doc":"Find approximate optimum of an objective function in the least number of evaluations. Parameters      fun : Callable np.ndarray], float], optional Objective function to minimize. Must take a single array-like argument x (parameter combination) and return a scalar y (cost value). x0 : tuple or list[tuple], optional Initial guess(es) or starting point(s) for the optimization. args : tuple, optional Additional arguments to pass to the objective function and constraints. bounds : list[tuple], optional Bounds for parameter variables. Should be a sequence of (min, max) pairs for each dimension, or an enumeration of nominal values. For any dimension, if  min and  max are integers, the dimension is assumed to be _integral_. If  min or  max are floats, the dimension is assumed to be _real_. In all other cases including if more than two values are provided, the dimension is assumed to be an _enumeration_ of values. See _Examples_ below.  note Nominals are represented as ordinals Categorical (nominal) enumerations, although often not inherently ordered, are internally represented as integral dimensions. If this appears to significantly affect your results (e.g. if your nominals span many cases), you may need to [one-hot encode] your nominal variables manually. [one-hot encode]: https: en.wikipedia.org/wiki/One-hot  warning Mind the dot If optimizing your problem fails to produce expected results, make sure you're not specifying integer dimensions where real floating values would make more sense. constraints : Callable np.ndarray], bool], optional Function representing constraints. Must return True iff the parameter combination x satisfies the constraints. >>> minimize( ., constraints=lambda x: (lb  1. disp : bool, default False Display progress and intermediate results. rng : int or np.random.RandomState or np.random.Generator, optional Random number generator or seed for reproducibility.  kwargs : dict, optional Additional parameters to pass to optimization function. Popular options are:  for  method=\"shgo\" :  n_init (number of initial points),  for  method=\"smbo\" :  n_init ,  n_candidates ,  n_models ,  estimator (for explanation, see class  sambo.Optimizer ),  for  method=\"sceua\" :  n_complexes ,  complex_size (as in [SCE-UA] algorithm), [SCE-UA]: https: doi.org/10.1007/BF00939380 Examples     Basic constrained 10-dimensional example: >>> from scipy.optimize import rosen >>> from sambo import minimize >>> result = minimize(rosen, bounds=[(-2, 2)]  10,  . constraints=lambda x: sum(x)  >> result message: Optimization terminated successfully. success: True fun: 0.0 x: [1 1 1 1 1 1 1 1 1 1] nfev: 1036 xv:  -2 -2  . -2 1] [-2 -2  . -2 1]  . [1 1  . 1 1] [1 1  . 1 1 funv: [ 1.174e+04 1.535e+04  . 0.000e+00 0.000e+00] A more elaborate example, minimizing an objective function of three variables: one integral, one real, and one nominal variable (see  bounds= ). >>> def demand(x):  . n_roses, price, advertising_costs = x  .  Ground truth model: Demand falls with price, but grows if you advertise  . demand = 20 - 2 price + .1 advertising_costs  . return n_roses  >> def objective(x):  . n_roses, price, advertising_costs = x  . production_costs = 1.5  n_roses  . profits = n_roses  price - production_costs - advertising_costs  . return -profits >>> bounds = [  . (0, 100),  From zero to at most roses per day  . (.5, 9.),  Price per rose sold  . (10, 20, 100),  Advertising budget  . ] >>> from sambo import minimize >>> result = minimize(fun=objective, bounds=bounds, constraints=demand) References       Endres, S.C., Sandrock, C. & Focke, W.W. A simplicial homology algorithm for Lipschitz optimisation. J Glob Optim 72, 181–217 (2018). https: doi.org/10.1007/s10898-018-0645-y  Duan, Q.Y., Gupta, V.K. & Sorooshian, S. Shuffled complex evolution approach for effective and efficient global minimization. J Optim Theory Appl 76, 501–521 (1993). https: doi.org/10.1007/BF00939380  Koziel, Slawomir, and Leifur Leifsson. Surrogate-based modeling and optimization. New York: Springer, 2013. https: doi.org/10.1007/978-1-4614-7551-4  Head, T., Kumar, M., Nahrstaedt, H., Louppe, G., & Shcherbatyi, I. (2021). scikit-optimize/scikit-optimize (v0.9.0). Zenodo. https: doi.org/10.5281/zenodo.5565057","func":1,"name":"minimize","i":1},{"ref":"sambo.Optimizer","url":0,"doc":"A sequential optimizer that optimizes an objective function using a surrogate model. Parameters      fun : Callable np.ndarray], float], optional Objective function to minimize. Must take a single array-like argument x (parameter combination) and return a scalar y (cost value). When unspecified, the Optimizer can be used iteratively in an ask-tell fashion using the methods named respectively. x0 : tuple | list[tuple], optional Initial guess(es) or starting point(s) for the optimization. args : tuple, optional Additional arguments to pass to the objective function and constraints. bounds : list[tuple], optional Bounds for the decision variables. A sequence of (min, max) pairs for each dimension. constraints : Callable np.ndarray], bool], optional Function representing constraints. Must return True iff the parameter combination x satisfies the constraints. max_iter : int, optional Maximum number of iterations allowed. n_init : int, optional Number of initial evaluations of the objective function before first fitting the surrogate model. n_candidates : int, optional Number of candidate solutions generated per iteration. n_iter_no_change : int, default 10 Number of iterations with no improvement before stopping. n_models : int, default 1 Number of most-recently-generated surrogate models to use for next best-point prediction. Useful for small and randomized estimators such as  \"et\" with no fixed  rng= . tol : float, default FLOAT32_PRECISION Tolerance for convergence. Optimization stops when found optimum improvements are below this threshold. estimator : {'gp', 'et', 'gb'} or scikit-learn-like regressor, default='gp' Surrogate model for the optimizer. Popular options include \"gp\" (Gaussian process), \"et\" (extra trees), or \"gb\" (gradient boosting). You can also provide your own regressor with a scikit-learn API, namely  fit() and  predict() methods. y0 : float or tuple[float], optional Initial value(s) of the objective function corresponding to  x0 . callback : Callable OptimizeResult], bool], optional A callback function that is called after each iteration. The optimization stops If the callback returns True or raises  StopIteration . n_jobs : int, default 1 Number of objective function evaluations to run in parallel. Most applicate when n_candidates > 1. disp : bool, default False Display progress and intermediate results. rng : int or np.random.RandomState or np.random.Generator, optional Random number generator or seed for reproducibility. Examples     >>> from sambo import Optimizer >>> def objective_func(x):  . return sum(x 2) >>> optimizer = Optimizer(fun=objective_func, bounds=[(-5, 5), (-5, 5)]) >>> result = optimizer.run() Using the ask-tell interface: >>> optimizer = Optimizer(fun=None, bounds=[(-5, 5), (-5, 5)]) >>> suggested_x = optimizer.ask() >>> y = [objective_func(x) for x in suggested_x] >>> optimizer.tell(y, suggested_x)","name":"Optimizer","i":2},{"ref":"sambo.Optimizer.ACQ_FUNCS","url":0,"doc":"Acquisition functions for selecting the best candidates from the sample. Currently defined keys: \"UCB\" for upper confidence bound ( mean - kappa  std ). [ ]:  (No blank line here! bug in pdoc)  note To make any use of the  kappa parameter, it is important for the estimator's  predict() method to implement  return_std= behavior. All built-in estimators ( \"gp\" ,  \"et\" ,  \"gb\" ) do so.","name":"ACQ_FUNCS","i":3},{"ref":"sambo.Optimizer.ask","url":0,"doc":"Propose candidate solutions for the next objective evaluation based on the current surrogate model(s) and acquisition function. Parameters      n_candidates : int, optional Number of candidate solutions to propose. If not specified, the default value set during initialization is used. acq_func : Callable, default ACQ_FUNCS['UCB'] Acquisition function used to guide the selection of candidate solutions. By default, upper confidence bound (i.e.  mean + kappa  std where  mean and  std are surrogate models' predicted results).  tip [See the source][_ghs] for how  ACQ_FUNCS['UCB'] is implemeted. The passed parameters are open to extension to accommodate alternative acquisition functions. [_ghs]: https: github.com/search?q=repo%3Asambo-optimization%2Fsambo%20ACQ_FUNCS&type=code kappa : float or list[float], default 0 The upper/lower-confidence-bound parameter, used by  acq_func , that balances exploration vs exploitation. Can also be an array of values to use sequentially for  n_cadidates . Returns    - np.ndarray An array of shape  (n_candidates, n_bounds) containing the proposed candidate solutions. Notes   - Candidates are proposed in parallel according to  n_jobs when  n_candidates > 1 . Examples     >>> candidates = optimizer.ask(n_candidates=2, kappa=2) >>> candidates array( 1.1, -0.2], [ 0.8, 0.1 )","func":1,"name":"ask","i":4},{"ref":"sambo.Optimizer.tell","url":0,"doc":"Provide incremental feedback to the optimizer by reporting back the objective function values ( y ) at suggested or new candidate points ( x ). This allows the optimizer to refine its underlying model(s) and better guide subsequent proposals. Parameters      y : float or list[float] The observed value(s) of the objective function. x : float or list[float], optional The input point(s) corresponding to the observed objective function values  y . If omitted, the optimizer assumes that the  y values correspond to the most recent candidates proposed by the  ask method (FIFO).  warning The function first takes  y , then  x , not the other way around! Examples     >>> candidates = optimizer.ask(n_candidates=3) >>>  .  Evaluate candidate solutions IRL and tell it to the optimizer >>> objective_values = [1.7, 3, .8] >>> optimizer.tell(y=objective_values, x=candidates)","func":1,"name":"tell","i":5},{"ref":"sambo.Optimizer.run","url":0,"doc":"Execute the optimization process for (at most) a specified number of iterations (function evaluations) and return the optimization result. This method performs sequential optimization by iteratively proposing candidates using method  ask() , evaluating the objective function, and updating the optimizer state with method  tell() . This continues until the maximum number of iterations ( max_iter ) is reached or other stopping criteria are met. This method encapsulates the entire optimization workflow, making it convenient to use when you don't need fine-grained control over individual steps ( ask and  tell ). It cycles between exploration and exploitation by random sampling  kappa appropriately. Parameters      max_iter : int, optional The maximum number of iterations to perform. If not specified, the default value provided during initialization is used. n_candidates : int, optional Number of candidates to propose and evaluate in each iteration. If not specified, the default value provided during initialization is used. Returns    - OptimizeResult: OptimizeResult Results of the optimization process. Examples     Run an optimization with a specified number of iterations: >>> result = optimizer.run(max_iter=30) >>> print(result.x, result.fun)  Best x, y","func":1,"name":"run","i":6},{"ref":"sambo.Optimizer.top_k","url":0,"doc":"Based on their objective function values, retrieve the top-k best solutions found by the optimization process so far. Parameters      k : int, default 1 The number of top solutions to retrieve. If  k exceeds the number of evaluated solutions, all available solutions are returned. Returns    - X : np.ndarray A list of best points with shape  (k, n_bounds) . y : np.ndarray Objective values at points of  X . Examples     Retrieve the best solution: >>> optimizer.run() >>> best_x, best_y = optimizer.top_k(1)","func":1,"name":"top_k","i":7},{"ref":"sambo.OptimizeResult","url":0,"doc":"Optimization result. Most fields are inherited from  scipy.optimize.OptimizeResult , with additional attributes:  xv ,  funv ,  model .","name":"OptimizeResult","i":8},{"ref":"sambo.OptimizeResult.success","url":0,"doc":"Whether or not the optimizer exited successfully.","name":"success","i":9},{"ref":"sambo.OptimizeResult.message","url":0,"doc":"More detailed cause of optimization termination.","name":"message","i":10},{"ref":"sambo.OptimizeResult.x","url":0,"doc":"The solution of the optimization,  shape=(n_features,) .","name":"x","i":11},{"ref":"sambo.OptimizeResult.fun","url":0,"doc":"Value of objective function at  x , aka the observed minimum.","name":"fun","i":12},{"ref":"sambo.OptimizeResult.nfev","url":0,"doc":"Number of objective function evaluations.","name":"nfev","i":13},{"ref":"sambo.OptimizeResult.nit","url":0,"doc":"Number of iterations performed by the optimization algorithm.","name":"nit","i":14},{"ref":"sambo.OptimizeResult.xv","url":0,"doc":"All the parameter sets that have been tried, in sequence,  shape=(nfev, n_features) .","name":"xv","i":15},{"ref":"sambo.OptimizeResult.funv","url":0,"doc":"Objective function values at points  xv .","name":"funv","i":16},{"ref":"sambo.OptimizeResult.model","url":0,"doc":"The optimization model(s) used, if any.","name":"model","i":17},{"ref":"sambo.SamboSearchCV","url":0,"doc":"SAMBO hyper-parameter search with cross-validation that can be used to  optimize hyperparameters of machine learning estimator pipelines like those of scikit-learn. Similar to  GridSearchCV from scikit-learn, but hopefully  much faster for large parameter spaces . Parameters      estimator : BaseEstimator The base model or pipeline to optimize parameters for. It needs to implement  fit() and  predict() methods. param_grid : dict Dictionary with parameters names (str) as keys and lists of parameter choices to try as values. Supports both continuous parameter ranges and discrete/string parameter enumerations. max_iter : int, optional, default=100 The maximum number of iterations for the optimization. method : {'shgo', 'sceua', 'smbo'}, optional, default='smbo' The optimization algorithm to use. See method  sambo.minimize() for comparison. rng : int or np.random.RandomState or np.random.RandomGenerator or None, optional Random seed for reproducibility.  kwargs : dict, optional Additional parameters to pass to  BaseSearchCV ( scoring= ,  n_jobs= ,  refit=  cv= ,  verbose= ,  pre_dispatch= ,  error_score= ,  return_train_score= ). For explanation, see documentation on [ GridSearchCV ][skl_gridsearchcv]. [skl_gridsearchcv]: https: scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html Attributes      opt_result_ : OptimizeResult The result of the optimization process. See Also     1: https: scikit-learn.org/stable/modules/grid_search.html","name":"SamboSearchCV","i":18},{"ref":"sambo.plot","url":1,"doc":"The module contains  functions for plotting convergence, regret, partial dependence, sequence of evaluations  . Example    - >>> import matplotlib.pyplot as plt >>> from scipy.optimize import rosen >>> result = minimize(rosen, bounds=[(-2, 2), (-2, 2)],  . constraints=lambda x: sum(x)  >> plot_convergence(result) >>> plot_regret(result) >>> plot_objective(result) >>> plot_evaluations(result) >>> plt.show()","name":"plot","i":19},{"ref":"sambo.plot.plot_convergence","url":1,"doc":"Plot one or several convergence traces, showing how an error estimate evolved during the optimization process. Parameters       results : OptimizeResult or tuple[str, OptimizeResult] The result(s) for which to plot the convergence trace. In tuple format, the string is used as the legend label for that result. true_minimum : float, optional The true minimum  value of the objective function, if known. xscale, yscale : {'linear', 'log'}, optional, default='linear' The scales for the axes. Returns    - fig : matplotlib.figure.Figure The matplotlib figure. Example    -  image /convergence.svg","func":1,"name":"plot_convergence","i":20},{"ref":"sambo.plot.plot_regret","url":1,"doc":"Plot one or several cumulative [regret] traces. Regret is the difference between achieved objective and its optimum. [regret]: https: en.wikipedia.org/wiki/Regret_(decision_theory) Parameters       results : OptimizeResult or tuple[str, OptimizeResult] The result(s) for which to plot the convergence trace. In tuple format, the string is used as the legend label for that result. true_minimum : float, optional The true minimum  value of the objective function, if known. If unspecified, minimum is assumed to be the minimum of the values found in  results . xscale, yscale : {'linear', 'log'}, optional, default='linear' The scales for the axes. Returns    - fig : matplotlib.figure.Figure The matplotlib figure. Example    -  image /regret.svg","func":1,"name":"plot_regret","i":21},{"ref":"sambo.plot.plot_objective","url":1,"doc":"Plot a 2D matrix of partial dependence plots that show the individual influence of each variable on the objective function. The diagonal plots show the effect of a single dimension on the objective function, while the plots below the diagonal show the effect on the objective function when varying two dimensions. Partial dependence plot shows how the values of any two variables influence  estimator predictions after \"averaging out\" the influence of all other variables. Partial dependence is calculated by averaging the objective value for a number of random samples in the search-space, while keeping one or two dimensions fixed at regular intervals. This averages out the effect of varying the other dimensions and shows the influence of just one or two dimensions on the objective function. Black dots indicate the points evaluated during optimization. A red star indicates the best found minimum (or  true_minimum , if provided).  note Partial dependence plot is only an estimation of the surrogate model which in turn is only an estimation of the true objective function that has been optimized. This means the plots show an \"estimate of an estimate\" and may therefore be quite imprecise, especially if relatively few samples have been collected during the optimization, and especially in regions of the search-space that have been sparsely sampled (e.g. regions far away from the found optimum). Parameters      result : OptimizeResult The optimization result. levels : int, default=10 Number of levels to draw on the contour plot, passed directly to  plt.contourf() . resolution : int, default=16 Number of points at which to evaluate the partial dependence along each dimension. n_samples : int, default=250 Number of samples to use for averaging the model function at each of the  n_points . estimator Last fitted model for estimating the objective function. size : float, default=2 Height (in inches) of each subplot/facet. zscale : {'linear', 'log'}, default='linear' Scale to use for the z axis of the contour plots. names : list of str, default=None Labels of the dimension variables. Defaults to  ['x0', 'x1',  .] . plot_dims : list of int, default=None List of dimension indices to be included in the plot. Default uses all non-constant dimensions of the search-space. true_minimum : list of floats, default=None Value(s) of the red point(s) in the plots. Default uses best found X parameters from the result. plot_max_points: int, default=200 Plot at most this many randomly-chosen evaluated points overlaying the contour plots. jitter : float, default=.02 Amount of jitter to add to categorical and integer dimensions. Default looks clear for categories of up to about 8 items. cmap: str or Colormap, default='viridis_r' Color map for contour plots, passed directly to  plt.contourf() . Returns    - fig : matplotlib.figure.Figure A 2D matrix of partial dependence sub-plots. Example    -  image /objective.svg","func":1,"name":"plot_objective","i":22},{"ref":"sambo.plot.plot_evaluations","url":1,"doc":"Visualize the order in which points were evaluated during optimization. This creates a 2D matrix plot where the diagonal plots are histograms that show distribution of samples for each variable. Plots below the diagonal are scatter-plots of the sample points, with the color indicating the order in which the samples were evaluated. A red star shows the best found parameters. Parameters      result :  OptimizeResult The optimization result. bins : int, default=10 Number of bins to use for histograms on the diagonal. This value is used for real dimensions, whereas categorical and integer dimensions use number of bins equal to their distinct values. names : list of str, default=None Labels of the dimension variables. Defaults to  ['x0', 'x1',  .] . plot_dims : list of int, default=None List of dimension indices to be included in the plot. Default uses all non-constant dimensions of the search-space. jitter : float, default=.02 Ratio of jitter to add to scatter plots. Default looks clear for categories of up to about 8 items. size : float, default=2 Height (in inches) of each subplot/facet. cmap: str or Colormap, default='summer' Color map for the sequence of scatter points.  todo Figure out how to lay out multiple Figure objects side-by-side. Alternatively, figure out how to take parameter  ax= to plot onto. Then we can show a plot of evaluations for each of the built-in methods ( TestDocs.test_make_doc_plots() ). Returns    - fig : matplotlib.figure.Figure A 2D matrix of subplots. Example    -  image /evaluations.svg","func":1,"name":"plot_evaluations","i":23}]]; let URLS=[
"sambo/index.html",
"sambo/plot.html"
]